{"version":3,"file":"static/js/213.2bb6fe24.chunk.js","mappings":"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","sources":["Components/MenuItemWithImage.tsx","Components/Artifact/ArtifactAutocomplete.tsx","Components/TextButton.tsx","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import { ListItemIcon, ListItemText, MenuItem, Theme } from \"@mui/material\";\n\ntype MenuItemWithImageProps = {\n  value: string\n  image?: Displayable\n  text: Displayable\n  theme: Theme\n  isSelected?: boolean\n  addlElement?: Displayable\n  props?: object\n}\n\nexport default function MenuItemWithImage({ value, image = \"\", text, theme, isSelected, addlElement, props }: MenuItemWithImageProps) {\n  return <MenuItem key={value} value={value} {...props}>\n    <ListItemIcon>{image}</ListItemIcon>\n    <ListItemText primaryTypographyProps={{ style: { fontWeight: isSelected ? theme.typography.fontWeightMedium : theme.typography.fontWeightRegular } }}>\n      {text}\n    </ListItemText>\n    {addlElement && addlElement}\n  </MenuItem>\n}\n","import { Autocomplete, AutocompleteProps, AutocompleteRenderGroupParams, Box, Chip, List, ListSubheader, TextField, useTheme } from '@mui/material';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\nimport i18n from '../../i18n';\nimport KeyMap from '../../KeyMap';\nimport usePromise from '../../ReactHooks/usePromise';\nimport { allMainStatKeys, allSubstatKeys, MainStatKey, SubstatKey } from '../../Types/artifact';\nimport { allElementsWithPhy, ArtifactRarity, ArtifactSetKey } from '../../Types/consts';\nimport ColorText from '../ColoredText';\nimport MenuItemWithImage from '../MenuItemWithImage';\nimport SolidColoredTextField from '../SolidColoredTextfield';\nimport { StarsDisplay } from '../StarDisplay';\nimport StatIcon from '../StatIcon';\n\ntype Grouper = string | number | undefined\n\ntype ArtifactMultiAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey\ntype ArtifactMultiAutocompleteOption<T extends ArtifactMultiAutocompleteKey, G extends Grouper> = {\n  key: T\n  label: string\n  grouper?: G\n}\ntype ArtifactMultiAutocompleteProps<T extends ArtifactMultiAutocompleteKey, G extends Grouper> = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<T, G>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  allArtifactKeysWithGrouper: readonly { key: T, grouper?: G }[]\n  selectedArtifactKeys: T[]\n  setArtifactKeys: (keys: T[]) => void\n  getName: (key: T) => string\n  getImage: (key: T) => JSX.Element\n  label: string\n}\nfunction ArtifactMultiAutocomplete<T extends ArtifactMultiAutocompleteKey, G extends Grouper>({ allArtifactKeysWithGrouper, selectedArtifactKeys, setArtifactKeys, getName, getImage, label, ...props }:\n  ArtifactMultiAutocompleteProps<T, G>) {\n  const theme = useTheme()\n\n  const handleChange = (_, value: ArtifactMultiAutocompleteOption<T, G>[]) => {\n    setArtifactKeys(value.map(v => v.key))\n  }\n  const options = useMemo(() => allArtifactKeysWithGrouper.map(({ key, grouper }) => ({ key, label: getName(key), grouper })), [allArtifactKeysWithGrouper, getName])\n  return <Autocomplete\n    autoHighlight\n    multiple\n    disableCloseOnSelect\n    options={options}\n    value={selectedArtifactKeys.map(key => ({ key: key, label: getName(key) }))}\n    onChange={handleChange}\n    getOptionLabel={(option) => option.label}\n    isOptionEqualToValue={(option, value) => option.key === value.key}\n    renderInput={(params) => <TextField\n      {...params}\n      label={label}\n      variant=\"filled\"\n      InputLabelProps={{ style: { color: theme.palette.text.primary } }}\n      color={selectedArtifactKeys.length ? \"success\" : \"primary\"}\n      type=\"search\"\n    />}\n    renderOption={(props, option) => (\n      <MenuItemWithImage\n        key={option.key}\n        value={option.key}\n        image={<ColorText color={KeyMap.getVariant(option.key)}>{getImage(option.key)}</ColorText>}\n        text={<ColorText color={KeyMap.getVariant(option.key)}>{option.label}</ColorText>}\n        theme={theme}\n        isSelected={selectedArtifactKeys.includes(option.key)}\n        props={props}\n      />\n    )}\n    renderTags={(selected, getTagProps) => selected.map((value, index) => {\n      const element = allElementsWithPhy.find(ele => value.key === `${ele}_dmg_`)\n      const color = element ? element : undefined\n      return <Chip {...getTagProps({ index })} key={value.key} icon={getImage(value.key)} label={value.label} color={color} />\n    })}\n    {...props}\n  />\n}\n\ntype ArtifactSetMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<ArtifactSetKey, ArtifactRarity>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  artSetKeys: ArtifactSetKey[]\n  setArtSetKeys: (keys: ArtifactSetKey[]) => void\n}\nexport function ArtifactSetMultiAutocomplete({ artSetKeys, setArtSetKeys, ...props }: ArtifactSetMultiAutocompleteProps) {\n  const artifactSheets = usePromise(() => ArtifactSheet.getAll, [])\n  const { t } = useTranslation([\"artifact\", \"artifactNames_gen\"])\n  if (!artifactSheets) return null\n\n  const allArtifactSetsAndRarities = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets))\n    .flatMap(([rarity, sets]) => sets.map(set => ({ key: set, grouper: +rarity as ArtifactRarity })))\n    .sort(sortByRarityAndName)\n\n  return <ArtifactMultiAutocomplete<ArtifactSetKey, ArtifactRarity>\n    allArtifactKeysWithGrouper={allArtifactSetsAndRarities}\n    selectedArtifactKeys={artSetKeys}\n    setArtifactKeys={setArtSetKeys}\n    getName={(key: ArtifactSetKey) => artifactSheets(key).nameRaw}\n    getImage={(key: ArtifactSetKey) => artifactSheets(key).defIcon}\n    label={t(\"artifact:autocompleteLabels.sets\")}\n    groupBy={(option) => option.grouper?.toString() ?? \"\"}\n    renderGroup={(params: AutocompleteRenderGroupParams) => params.group && <List key={params.group} component={Box}>\n      <ListSubheader key={`${params.group}Header`} sx={{ top: \"-1em\" }}>\n        {params.group} <StarsDisplay stars={+params.group as ArtifactRarity} />\n      </ListSubheader>\n      {params.children}\n    </List>}\n    {...props}\n  />\n}\n\ntype ArtifactMainStatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<MainStatKey, undefined>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  mainStatKeys: MainStatKey[]\n  setMainStatKeys: (keys: MainStatKey[]) => void\n}\nexport function ArtifactMainStatMultiAutocomplete({ mainStatKeys, setMainStatKeys, ...props }: ArtifactMainStatMultiAutocompleteProps) {\n  const { t } = useTranslation(\"artifact\")\n  return <ArtifactMultiAutocomplete<MainStatKey, undefined>\n    allArtifactKeysWithGrouper={allMainStatKeys.map(key => ({ key }))}\n    selectedArtifactKeys={mainStatKeys}\n    setArtifactKeys={setMainStatKeys}\n    getName={(key: MainStatKey) => KeyMap.getArtStr(key)}\n    getImage={(key: MainStatKey) => StatIcon[key]}\n    label={t(\"autocompleteLabels.mainStats\")}\n    {...props}\n  />\n}\n\ntype ArtifactSubstatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<SubstatKey, undefined>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  substatKeys: SubstatKey[]\n  setSubstatKeys: (keys: SubstatKey[]) => void\n}\nexport function ArtifactSubstatMultiAutocomplete({ substatKeys, setSubstatKeys, ...props }: ArtifactSubstatMultiAutocompleteProps) {\n  const { t } = useTranslation(\"artifact\")\n  return <ArtifactMultiAutocomplete<SubstatKey, undefined>\n    allArtifactKeysWithGrouper={allSubstatKeys.map(key => ({ key }))}\n    selectedArtifactKeys={substatKeys}\n    setArtifactKeys={setSubstatKeys}\n    getName={(key: SubstatKey) => KeyMap.getArtStr(key)}\n    getImage={(key: SubstatKey) => StatIcon[key]}\n    label={t(\"autocompleteLabels.substats\")}\n    {...props}\n  />\n}\n\ntype ArtifactSingleAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey | \"\"\ntype ArtifactSingleAutocompleteOption<T extends ArtifactSingleAutocompleteKey, G extends Grouper> = {\n  key: T\n  label: string\n  grouper?: G\n}\ntype ArtifactSingleAutocompleteProps<T extends ArtifactSingleAutocompleteKey, G extends Grouper> = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<T, G>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  allArtifactKeysWithGrouper: readonly { key: T, grouper?: G }[]\n  selectedArtifactKey: T\n  setArtifactKey: (key: T | \"\") => void\n  getName: (key: T) => string\n  getImage: (key: T) => JSX.Element\n  label: string\n  disable?: (v: any) => boolean\n  showDefault?: boolean\n  defaultText?: string\n  defaultIcon?: Displayable\n}\nfunction ArtifactSingleAutocomplete<T extends ArtifactSingleAutocompleteKey, G extends Grouper>({ allArtifactKeysWithGrouper, selectedArtifactKey, setArtifactKey, getName, getImage, label, disable = () => false, showDefault = false, defaultText = \"\", defaultIcon = \"\", ...props }:\n  ArtifactSingleAutocompleteProps<T, G>) {\n  const theme = useTheme();\n\n  const options = useMemo(() =>\n    (showDefault\n      ? [{ key: \"\" as T, label: defaultText }]\n      : []\n    ).concat(allArtifactKeysWithGrouper.map(({ key, grouper }) => (\n      { key, label: getName(key), grouper }\n    ))), [allArtifactKeysWithGrouper, getName, defaultText, showDefault])\n\n  return <Autocomplete\n    autoHighlight\n    options={options}\n    clearIcon={selectedArtifactKey ? undefined : \"\"} // Hide the clear icon if the value is already default\n    value={{ key: selectedArtifactKey, label: getName(selectedArtifactKey) }}\n    onChange={(event, newValue, reason) => (event.type !== \"change\" || reason !== \"clear\") && setArtifactKey(newValue ? newValue.key : \"\")}\n    getOptionLabel={(option) => option.label ? option.label : defaultText}\n    isOptionEqualToValue={(option, value) => option.key === value.key}\n    getOptionDisabled={option => disable(option.key)}\n    renderInput={(props) => <SolidColoredTextField\n      {...props}\n      label={label}\n      startAdornment={getImage(selectedArtifactKey)}\n      hasValue={selectedArtifactKey ? true : false}\n    />}\n    renderOption={(props, option) => (\n      <MenuItemWithImage\n        key={option.key}\n        value={option.key}\n        image={getImage(option.key)}\n        text={option.label}\n        theme={theme}\n        isSelected={selectedArtifactKey === option.key}\n        props={props}\n      />\n    )}\n    {...props}\n  />\n}\n\ntype ArtifactSetSingleAutocompleteProps = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<ArtifactSetKey | \"\", ArtifactRarity>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\n  artSetKey: ArtifactSetKey | \"\"\n  setArtSetKey: (key: ArtifactSetKey | \"\") => void\n  label?: string\n  disable?: (v: any) => boolean\n  showDefault?: boolean\n  defaultText?: string\n  defaultIcon?: Displayable\n}\nexport function ArtifactSetSingleAutocomplete({ artSetKey, setArtSetKey, label = \"\", ...props }: ArtifactSetSingleAutocompleteProps) {\n  const artifactSheets = usePromise(() => ArtifactSheet.getAll, [])\n  const { t } = useTranslation([\"artifact\", \"artifactNames_gen\"])\n  label = label ? label : t(\"artifact:autocompleteLabels.set\")\n  if (!artifactSheets) return null\n\n  const allArtifactSetsAndRarities = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets))\n    .flatMap(([rarity, sets]) => sets.map(set => ({ key: set, grouper: +rarity as ArtifactRarity })))\n    .sort(sortByRarityAndName)\n\n  return <ArtifactSingleAutocomplete<ArtifactSetKey | \"\", ArtifactRarity>\n    allArtifactKeysWithGrouper={allArtifactSetsAndRarities}\n    selectedArtifactKey={artSetKey}\n    setArtifactKey={setArtSetKey}\n    getName={(key: ArtifactSetKey | \"\") => key && artifactSheets(key).nameRaw}\n    getImage={(key: ArtifactSetKey | \"\") => key ? artifactSheets(key).defIcon : <></>}\n    label={label}\n    groupBy={(option) => option.grouper?.toString() ?? \"\"}\n    renderGroup={(params: AutocompleteRenderGroupParams) => params.group && <List key={params.group} component={Box}>\n      <ListSubheader key={`${params.group}Header`} sx={{ top: \"-1em\" }}>\n        {params.group} <StarsDisplay stars={+params.group as ArtifactRarity} />\n      </ListSubheader>\n      {params.children}\n    </List>}\n    {...props}\n  />\n}\n\nfunction sortByRarityAndName(a: { key: ArtifactSetKey, grouper: ArtifactRarity }, b: { key: ArtifactSetKey, grouper: ArtifactRarity }) {\n  if (a.grouper > b.grouper) {\n    return -1\n  }\n  if (a.grouper < b.grouper) {\n    return 1\n  }\n\n  const aName = i18n.t(`artifactNames_gen:${a.key}`)\n  const bName = i18n.t(`artifactNames_gen:${b.key}`)\n  if (aName < bName) {\n    return -1\n  }\n  if (aName > bName) {\n    return 1\n  }\n\n  return 0\n}\n","import { Button, ButtonProps, styled } from \"@mui/material\";\n\nconst DisabledButton = styled(Button)(({ theme }) => ({\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.text.secondary,\n  }\n}))\n\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\n  return <DisabledButton {...props} disabled  >\n    {children}\n  </DisabledButton>\n}\n","import { ButtonProps, MenuItem } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { ArtifactRarity } from \"../../Types/consts\";\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\nimport { StarsDisplay } from \"../StarDisplay\";\n\ntype props = ButtonProps & {\n  rarity?: ArtifactRarity\n  onChange: (rarity: ArtifactRarity) => void\n  filter: (ArtifactRarity) => boolean\n}\n\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\n  const { t } = useTranslation(\"artifact\")\n  return <DropdownButton\n    {...props}\n    title={rarity ? <StarsDisplay stars={rarity} /> : t`editor.rarity`}\n    color={rarity ? \"success\" : \"primary\"}\n  >\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\n        <StarsDisplay stars={rarity} />\n      </MenuItem>)}\n  </DropdownButton>\n}\n","import { Replay } from \"@mui/icons-material\"\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\n\ntype ArtifactSlotDropdownProps = ButtonProps & {\n  slotKey?: SlotKey | \"\"\n  onChange: (slotKey: SlotKey | \"\") => void\n  hasUnselect?: boolean\n}\n\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  return <DropdownButton\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\n    color={slotKey ? \"success\" : \"primary\"}\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\n    {...props}\n  >\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <ListItemText>\n        {t`ui:unselect`}\n      </ListItemText>\n    </MenuItem>}\n    {hasUnselect && <Divider />}\n    {allSlotKeys.map(key =>\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\n        <ListItemIcon>\n          {artifactSlotIcon(key)}\n        </ListItemIcon>\n        <ListItemText>\n          {t(`artifact:slotName:${key}`)}\n        </ListItemText>\n      </MenuItem>)}\n  </DropdownButton>\n}\n","import { TextField, TextFieldProps } from '@mui/material'\nimport { useCallback, useEffect, useState } from 'react'\ntype props = TextFieldProps & {\n  value?: number | undefined,\n  onChange: (newValue: number | undefined) => void,\n  disabled?: boolean\n  float?: boolean,\n  allowEmpty?: boolean,\n}\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\n  const [state, setState] = useState(\"\")\n  const sendChange = useCallback(\n    () => {\n      if (state === \"\") return onChange(0)\n      const parseFunc = float ? parseFloat : parseInt\n      onChange(parseFunc(state))\n    },\n    [onChange, state, float],\n  )\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\n\n  return <TextField\n    value={state}\n    aria-label=\"custom-input\"\n    type=\"number\"\n    onChange={(e: any) => setState(e.target.value)}\n    onBlur={sendChange}\n    disabled={disabled}\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\n    {...props}\n  />\n}","import { Grid, Typography } from '@mui/material';\nimport React from 'react';\nimport { Trans } from 'react-i18next';\nimport CardLight from '../../../Components/Card/CardLight';\nimport InfoTooltip from '../../../Components/InfoTooltip';\nimport PercentBadge from '../../../Components/PercentBadge';\n\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\n  return <CardLight sx={{ py: 1, px: 2 }}>\n    <Grid container spacing={1}>\n      <Grid item>{t(`editor.${eff}`)}</Grid>\n      <Grid item flexGrow={1}>\n        <InfoTooltip title={<span>\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\n        </span>} />\n      </Grid>\n      <Grid item xs=\"auto\">\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\n      </Grid>\n    </Grid>\n  </CardLight>\n}\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport CardLight from '../../../Components/Card/CardLight';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\nimport SqBadge from '../../../Components/SqBadge';\nimport StatIcon from '../../../Components/StatIcon';\nimport TextButton from '../../../Components/TextButton';\nimport Artifact from '../../../Data/Artifacts/Artifact';\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\nimport { allSubstatKeys, ICachedArtifact, ISubstat } from '../../../Types/artifact';\nimport { clamp } from '../../../Util/Util';\nimport PercentBadge from '../../../Components/PercentBadge';\nimport { RollColorKey } from '../../../Types/consts';\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\n  const { t } = useTranslation(\"artifact\")\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\n\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\n  const unit = KeyMap.unit(key), rollNum = rolls.length\n\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\n\n  if (artifact) {\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\n    const rarity = artifact.rarity\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\n    const maxRollNum = numUpgrades + high - 3;\n    allowedRolls = maxRollNum - rollNum\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\n  }\n  const rollOffset = 7 - rollData.length\n\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\n\n  return <CardLight>\n    <Box sx={{ display: \"flex\" }}>\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\n        <DropdownButton\n          startIcon={key ? StatIcon[key] : undefined}\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\n          disabled={!artifact}\n          color={key ? \"success\" : \"primary\"}\n          sx={{ whiteSpace: \"nowrap\" }}>\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\n          {allSubstatKeys.filter(key => mainStatKey !== key)\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\n              <ListItemIcon>{StatIcon[k]}</ListItemIcon>\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\n            </MenuItem>)}\n        </DropdownButton>\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\n          <CustomNumberInput\n            float={unit === \"%\"}\n            placeholder={t`editor.substat.selectSub`}\n            value={key ? value : undefined}\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\n            disabled={!key}\n            error={!!error}\n            sx={{\n              px: 1,\n            }}\n            inputProps={{\n              sx: { textAlign: \"right\" }\n            }}\n          />\n        </CustomNumberInputButtonGroupWrapper>\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\n        {rollData.map((v, i) => {\n          let newValue = cacheValueString(accurateValue + v, unit)\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\n        })}\n      </ButtonGroup>\n    </Box>\n    <Box sx={{ p: 1, }}>\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\n        <Grid item>\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}` as RollColorKey}>\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\n          </SqBadge>\n        </Grid>\n        <Grid item flexGrow={1}>\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\n        </Grid>\n        <Grid item xs=\"auto\" flexShrink={1}>\n          <Typography>\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\n            </Trans>\n          </Typography>\n        </Grid>\n      </Grid>}\n\n    </Box>\n  </CardLight >\n}\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\nimport CardDark from '../../../Components/Card/CardDark';\nimport CloseButton from '../../../Components/CloseButton';\nimport ModalWrapper from '../../../Components/ModalWrapper';\nimport scan_art_main from \"./imgs/scan_art_main.png\";\nimport Snippet from \"./imgs/snippet.png\";\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\n  return <ModalWrapper open={modalShow} onClose={hide} >\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\n          </Grid>\n          <Grid item>\n            <CloseButton onClick={hide} />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Alert variant=\"outlined\" severity=\"warning\">\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\n        </Alert>\n        <Grid container spacing={1} mt={1}>\n          <Grid item xs={8} md={4}>\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\n          </Grid>\n          <Grid item xs={12} md={8}>\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\n            <Typography variant=\"h6\">Single artifact</Typography>\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\n          </Grid>\n          <Grid item xs={12} md={7}>\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\n          </Grid>\n          <Grid item xs={8} md={5}>\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={hide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}","export class BorrowManager<T> {\n  data: Dict<string, { value: T, refCount: number }> = {}\n  init: (key: string) => T\n  deinit: (key: string, value: T) => void\n\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\n    this.init = init\n    this.deinit = deinit\n  }\n\n  /**\n   * Borrow the object corresponding to `key`, creating the object as necessary.\n   * The borrowing ends when `callback`'s promise is fulfilled.\n   * When the last borrowing ends, `deinit` the object.\n   *\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\n   */\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\n    if (!this.data[key]) {\n      this.data[key] = { value: this.init(key), refCount: 0 }\n    }\n\n    const box = this.data[key]!\n    box.refCount += 1\n    const result = await callback(box.value)\n    box.refCount -= 1\n    if (!box.refCount) {\n      // Last user. Cleaning up\n      delete this.data[key]\n      this.deinit(key, box.value)\n    }\n    return result\n  }\n}\n","import { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\nimport ColorText from '../Components/ColoredText';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { AllArtifactSheets, ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport { allMainStatKeys, allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\nimport { BorrowManager } from './BorrowManager';\n\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\nconst workerCount = 2\n\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\n  const scheduler = createScheduler()\n  const promises = Array(workerCount).fill(0).map(async _ => {\n    const worker = createWorker({\n      errorHandler: console.error\n    })\n\n    await worker.load()\n    await worker.loadLanguage(language)\n    await worker.initialize(language)\n    scheduler.addWorker(worker)\n  })\n\n  await Promise.any(promises)\n  return scheduler\n}, (_language, value) => {\n  value.then(value => value.terminate())\n})\n\nexport type ProcessedEntry = {\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\n}\nexport type OutstandingEntry = {\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\n}\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\ntype ProcessingMessage = { type: \"processing\" }\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\ntype PopMessage = { type: \"pop\" }\ntype ClearMessage = { type: \"clear\" }\ntype Color = [number, number, number] // RGB\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\n  switch (message.type) {\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\n    case \"processing\": // Processing `outstanding` head. Refresh\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\n    case \"processed\":\n      if (queue.outstanding[0].file === message.file)\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\n      return queue // Not in the list, ignored\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\n    case \"clear\": return { processed: [], outstanding: [] }\n  }\n}\n\nexport function processEntry(entry: OutstandingEntry) {\n  if (entry.result) return\n\n  const { file, fileName } = entry\n  entry.imageURL = fileToURL(file)\n  entry.result = entry.imageURL.then(async imageURL => {\n    const sheets = await ArtifactSheet.getAll\n    const ocrResult = await ocr(imageURL)\n\n    const [artifact, texts] = findBestArtifact(\n      sheets, ocrResult.rarities,\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\n      parseSlotKeys(ocrResult.whiteTexts),\n      parseSubstats(ocrResult.substatTexts),\n      parseMainStatKeys(ocrResult.whiteTexts),\n      parseMainStatValues(ocrResult.whiteTexts)\n    )\n\n    return { file, result: { fileName, imageURL, artifact, texts } }\n  })\n}\n\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\n  const reader = new FileReader()\n  reader.onloadend = ({ target }) =>\n    resolve(target!.result as string)\n  reader.readAsDataURL(file)\n})\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\n  const img = new Image()\n  img.onload = ({ target }) =>\n    resolve(imageToImageData(target as HTMLImageElement))\n  img.src = urlFile\n})\nfunction imageToImageData(image: HTMLImageElement): ImageData {\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\n  canvas.width = image.width\n  canvas.height = image.height\n  context.drawImage(image, 0, 0, image.width, image.height)\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\n}\nfunction imageDataToCanvas(imageData: ImageData) {\n  // create off-screen canvas element\n  const canvas = document.createElement('canvas')\n  canvas.width = imageData.width\n  canvas.height = imageData.height\n\n  // update canvas with new data\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\n  return canvas // produces a PNG file\n}\n\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\n  const imageData = await urlToImageData(imageURL)\n\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\n\n  const awaits = [\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\n  ]\n\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\n}\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\n  const canvas = imageDataToCanvas(imageData)\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\n  return rec.data.lines.map(line => line.text)\n}\n\nexport function findBestArtifact(sheets: AllArtifactSheets, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\n  // TODO: restore\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\n\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\n    // TODO: restore\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\n    location: \"\", lock: false, exclude: false,\n  }]\n\n  // Rate each rarity\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\n    let score = 0\n    if (textSetKeys.size) {\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets(set).rarity.includes(rarity) ? 1 : 0), 0)\n      score += count / textSetKeys.size\n    }\n    if (substats.length) {\n      const count = substats.reduce((count, substat) =>\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\n      score += count / substats.length * 2\n    }\n    return score\n  })\n\n  // Test all *probable* combinations\n  for (const slotKey of allSlotKeys) {\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\n      const relevantMainStatValues = mainStatValues\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\n        .map(value => value.mainStatValue)\n\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\n        const rarity = parseInt(rarityString) as ArtifactRarity\n        const setKeys = relevantSetKey.filter(setKey => sheets(setKey).rarity.includes(rarity))\n        const rarityScore = mainStatScore + rarityIndividualScore\n\n        if (rarityScore + 2 < bestScore) continue // Early bail out\n\n        for (const minimumMainStatValue of relevantMainStatValues) {\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\n          const mainStatVal = values[level]\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\n\n          for (const setKey of setKeys) {\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\n            if (score >= bestScore) {\n              if (score > bestScore) bestArtifacts = []\n              bestScore = score\n              bestArtifacts.push({\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\n              })\n            }\n          }\n        }\n        if (rarityScore >= bestScore) {\n          const level = 0\n          for (const setKey of setKeys) {\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\n\n            if (score > bestScore) bestArtifacts = []\n            bestScore = score\n            bestArtifacts.push({\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\n            })\n          }\n        }\n      }\n    }\n  }\n\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\n  const chosen = {\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\n  } as Dict<keyof ICachedArtifact, Set<string>>\n\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\n  result.substats = substats.filter((substat, i) =>\n    substat.key !== result.mainStatKey &&\n    substats.slice(0, i).every(other => other.key !== substat.key))\n  for (let i = result.substats.length; i < 4; i++)\n    result.substats.push({ key: \"\", value: 0 })\n\n  for (const other of bestArtifacts) {\n    chosen.setKey!.add(other.setKey)\n    chosen.rarity!.add(other.rarity as any)\n    chosen.level!.add(other.level as any)\n    chosen.slotKey!.add(other.slotKey)\n    chosen.mainStatKey!.add(other.mainStatKey)\n  }\n\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\n  }\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\n  }\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\n  }\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\n  }\n\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\n    if (recommended.size > 1)\n      texts[key] = ambiguousText(result[key], [...available], name, text)\n    else if (recommended.size === 1)\n      texts[key] = detectedText(result[key], name, text)\n    else if (chosen[key]!.size > 1)\n      texts[key] = unknownText(result[key], name, text)\n    else\n      texts[key] = inferredText(result[key], name, text)\n  }\n\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets(value).name)\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\n  }</>\n\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\n    if (mainStatKeys.has(result.mainStatKey)) {\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\n    } else {\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\n    }\n  } else {\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\n  }\n\n  return [result, texts]\n}\n\nfunction parseSetKeys(texts: string[], sheets: AllArtifactSheets): Set<ArtifactSetKey> {\n  const results = new Set<ArtifactSetKey>([])\n  for (const text of texts)\n    for (const key of allArtifactSets)\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets(key).nameRaw.replace(/\\W/g, '')) <= 2)\n        results.add(key)\n  return results\n}\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\n  const results = new Set<Rarity>([])\n  for (let y = 0; y < height; y++) {\n    let star = 0, onStar = false;\n    for (let x = 0; x < width; x++) {\n      let i = (y * width + x) * 4\n      let r = d[i], g = d[i + 1], b = d[i + 2];\n      if (colorCloseEnough({ r, g, b }, starColor)) {\n        if (!onStar) {\n          onStar = true\n          star++\n        }\n      } else {\n        onStar = false\n      }\n    }\n\n    if (lastRowNum !== star) {\n      lastRowNum = star\n      rowsWithNumber = 1;\n    } else if (lastRowNum) {\n      rowsWithNumber++\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\n    }\n  }\n  return results\n}\nfunction colorCloseEnough(color1, color2, threshold = 5) {\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\n  return intCloseEnough(color1.r, color2.r) &&\n    intCloseEnough(color1.g, color2.g) &&\n    intCloseEnough(color1.b, color2.b)\n}\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\n  const results = new Set<SlotKey>()\n  for (const text of texts)\n    for (const key of allSlotKeys)\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\n        results.add(key)\n  return results\n}\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\n  const results = new Set<MainStatKey>([])\n  for (const text of texts)\n    for (const key of allMainStatKeys) {\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\n        results.add(key)\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\n        results.add(key)\n    }\n  return results\n}\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\n  const results: { mainStatValue: number, unit?: string }[] = []\n  for (const text of texts) {\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\n    let match = regex.exec(text)\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\n    match = regex.exec(text)\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\n  }\n  return results\n}\nfunction parseSubstats(texts: string[]): ISubstat[] {\n  const matches: ISubstat[] = []\n  for (let text of texts) {\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\n    //parse substats\n    allSubstatKeys.forEach(key => {\n      const name = KeyMap.getStr(key)\n      const regex = KeyMap.unit(key) === \"%\" ?\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\n      const match = regex.exec(text)\n      if (match)\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\n    })\n  }\n  return matches.slice(0, 4)\n}\n\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\n  const { region = \"all\", mode = \"color\" } = options\n  const d = Uint8ClampedArray.from(pixelData.data)\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\n  const bw = mode === \"bw\", invert = mode === \"invert\"\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\n  for (let i = 0; i < d.length; i += 4) {\n    const r = d[i], g = d[i + 1], b = d[i + 2];\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\n      r >= color1[0] && r <= color2[0] &&\n      g >= color1[1] && g <= color2[1] &&\n      b >= color1[2] && b <= color2[2]) {\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\n      else if (invert) {\n        d[i] = 255 - r\n        d[i + 1] = 255 - g\n        d[i + 2] = 255 - b\n      } // else orignal color\n    } else {\n      d[i] = d[i + 1] = d[i + 2] = 255\n    }\n  }\n  return new ImageData(d, pixelData.width, pixelData.height)\n}\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Add, ChevronRight, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, MenuItem, Skeleton, styled, Typography, useMediaQuery, useTheme } from '@mui/material';\nimport { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { ArtifactSetSingleAutocomplete } from '../Components/Artifact/ArtifactAutocomplete';\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\nimport CardDark from '../Components/Card/CardDark';\nimport CardLight from '../Components/Card/CardLight';\nimport CloseButton from '../Components/CloseButton';\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport ImgIcon from '../Components/Image/ImgIcon';\nimport ModalWrapper from '../Components/ModalWrapper';\nimport { StatColoredWithUnit } from '../Components/StatDisplay';\nimport StatIcon from '../Components/StatIcon';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport { cachedArtifact, validateArtifact } from '../Database/DataManagers/ArtifactData';\nimport { DatabaseContext } from '../Database/Database';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\nimport { allElementsWithPhy, ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\nimport { clamp, deepClone } from '../Util/Util';\nimport ArtifactCard from './ArtifactCard';\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\n\nconst maxProcessingCount = 3, maxProcessedCount = 16\nconst allSubstatFilter = new Set(allSubstatKeys)\ntype ResetMessage = { type: \"reset\" }\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\ninterface IEditorArtifact {\n  setKey: ArtifactSetKey,\n  slotKey: SlotKey,\n  level: number,\n  rarity: ArtifactRarity,\n  mainStatKey: MainStatKey,\n  substats: ISubstat[],\n}\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\n  switch (action.type) {\n    case \"reset\": return\n    case \"substat\": {\n      const { index, substat } = action\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\n      if (oldIndex === -1 || oldIndex === index)\n        state!.substats[index] = substat\n      else  // Already in used, swap the items instead\n        [state!.substats[index], state!.substats[oldIndex]] =\n          [state!.substats[oldIndex], state!.substats[index]]\n      return { ...state! }\n    }\n    case \"overwrite\": return action.artifact\n    case \"update\": return { ...state!, ...action.artifact }\n  }\n}\n\nconst InputInvis = styled('input')({\n  display: 'none',\n});\nexport type ArtifactEditorProps = { artifactIdToEdit?: string, cancelEdit: () => void, allowUpload?: boolean, allowEmpty?: boolean, disableSet?: boolean, disableSlot?: boolean }\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit, allowUpload = false, allowEmpty = false, disableSet = false, disableSlot = false }: ArtifactEditorProps) {\n  const { t } = useTranslation(\"artifact\")\n\n  const artifactSheets = usePromise(() => ArtifactSheet.getAll, [])\n\n  const { database } = useContext(DatabaseContext)\n\n  const [show, setShow] = useState(false)\n\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\n  useEffect(() => database.arts.followAny(setDirtyDatabase), [database, setDirtyDatabase])\n\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\n  const artifact = useMemo(() => editorArtifact && validateArtifact(editorArtifact), [editorArtifact])\n\n  const [modalShow, setModalShow] = useState(false)\n\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\n\n  const processingImageURL = usePromise(() => firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\n  const processingResult = usePromise(() => firstOutstanding?.result, [firstOutstanding?.result])\n\n  const remaining = processed.length + outstanding.length\n\n  const image = firstProcessed?.imageURL ?? processingImageURL\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\n\n  const disableEditSlot = !!artifact?.location || disableSlot\n\n  useEffect(() => {\n    if (!artifact && artifactProcessed)\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\n  }, [artifact, artifactProcessed, artifactDispatch])\n\n  useEffect(() => {\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\n    const processingCurrent = numProcessing && !outstanding[0].result\n    outstanding.slice(0, numProcessing).forEach(processEntry)\n    if (processingCurrent)\n      dispatchQueue({ type: \"processing\" })\n  }, [processed.length, outstanding])\n\n  useEffect(() => {\n    if (processingResult)\n      dispatchQueue({ type: \"processed\", ...processingResult })\n  }, [processingResult, dispatchQueue])\n\n  const uploadFiles = useCallback((files: FileList) => {\n    setShow(true)\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\n  }, [dispatchQueue, setShow])\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\n\n  useEffect(() => {\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\n    allowUpload && window.addEventListener('paste', pasteFunc);\n    return () => {\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\n    }\n  }, [uploadFiles, allowUpload])\n\n  const onUpload = useCallback(\n    e => {\n      uploadFiles(e.target.files)\n      e.target.value = null // reset the value so the same file can be uploaded again...\n    },\n    [uploadFiles],\n  )\n\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database.arts.get(artifactIdToEdit)\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\n    const { duplicated, upgraded } = dirtyDatabase && database.arts.findDups(artifact)\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\n\n  const { artifact: cArtifact, errors } = useMemo(() => {\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\n    const validated = cachedArtifact(artifact, artifactIdToEdit)\n    if (old) {\n      validated.artifact.location = old.location\n      validated.artifact.exclude = old.exclude\n    }\n    return validated\n  }, [artifact, artifactIdToEdit, old])\n\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\n  useEffect(() => {\n    if (artifactIdToEdit === \"new\") {\n      setShow(true)\n      artifactDispatch({ type: \"reset\" })\n    }\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database.arts.get(artifactIdToEdit)\n    if (databaseArtifact) {\n      setShow(true)\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\n    }\n  }, [artifactIdToEdit, database, dirtyDatabase])\n\n  const sheet = artifact ? artifactSheets?.(artifact.setKey) : undefined\n  const reset = useCallback(() => {\n    cancelEdit?.();\n    dispatchQueue({ type: \"pop\" })\n    artifactDispatch({ type: \"reset\" })\n  }, [cancelEdit, artifactDispatch])\n  const update = useCallback((newValue: Partial<IArtifact>) => {\n    const newSheet = newValue.setKey ? artifactSheets!(newValue.setKey) : sheet!\n\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\n    }\n\n    if (newValue.setKey) {\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\n    }\n    if (newValue.rarity)\n      newValue.level = artifact?.level ?? 0\n    if (newValue.level)\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\n    if (newValue.slotKey)\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\n\n    if (newValue.mainStatKey) {\n      newValue.substats = [0, 1, 2, 3].map(i =>\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\n    }\n    artifactDispatch({ type: \"update\", artifact: newValue })\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\n    artifactDispatch({ type: \"substat\", index, substat })\n  }, [artifactDispatch])\n  const isValid = !errors.length\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cArtifact ? Artifact.getArtifactEfficiency(cArtifact, allSubstatFilter) : {}\n  const preventClosing = processed.length || outstanding.length\n  const onClose = useCallback(\n    (e) => {\n      if (preventClosing) e.preventDefault()\n      setShow(false)\n      cancelEdit()\n    }, [preventClosing, setShow, cancelEdit])\n\n  const theme = useTheme();\n  const grmd = useMediaQuery(theme.breakpoints.up('md'));\n\n  const element = artifact ? allElementsWithPhy.find(ele => artifact.mainStatKey.includes(ele)) : undefined\n  const color = artifact\n    ? element ?? \"success\"\n    : \"primary\"\n\n  const updateSetKey = useCallback((setKey: ArtifactSetKey | \"\") => update({ setKey: setKey as ArtifactSetKey }), [update],)\n  const setACDisable = useCallback((key: ArtifactSetKey | \"\") => {\n    if (key === \"\") return true\n    //Disable being able to select any of the prayer set unless the current slotkey is circlet\n    if (disableEditSlot && slotKey !== \"circlet\" && (key === \"PrayersForDestiny\" || key === \"PrayersForIllumination\" || key === \"PrayersForWisdom\" || key === \"PrayersToSpringtime\"))\n      return true\n    return false\n  }, [disableEditSlot, slotKey])\n\n\n  return <ModalWrapper open={show} onClose={onClose} >\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\n      <CardHeader\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\n      />\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n        <Grid container spacing={1} columns={{ xs: 1, md: 2 }} >\n          {/* Left column */}\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n            {/* set & rarity */}\n            <Box sx={{ display: \"flex\", gap: 1, mb: 1 }}>\n              {/* Artifact Set */}\n              <ArtifactSetSingleAutocomplete\n                disabled={disableSet}\n                showDefault\n                disableClearable\n                size=\"small\"\n                artSetKey={artifact?.setKey ?? \"\"}\n                setArtSetKey={updateSetKey}\n                sx={(theme) => ({\n                  flexGrow: 1,\n                  \".MuiFilledInput-root\": {\n                    borderBottomRightRadius: theme.shape.borderRadius,\n                    borderBottomLeftRadius: theme.shape.borderRadius\n                  }\n                })}\n                defaultText={t(\"editor.unknownSetName\")}\n                disable={setACDisable}\n              />\n              {/* rarity dropdown */}\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\n            </Box>\n\n            {/* level */}\n            <Box component=\"div\" display=\"flex\">\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\n              />\n              <ButtonGroup >\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\n              </ButtonGroup>\n            </Box>\n\n            {/* slot */}\n            <Box component=\"div\" display=\"flex\">\n              <ArtifactSlotDropdown disabled={disableEditSlot || !sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\n                  <Typography color=\"text.secondary\">\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\n                  </Typography>\n                </Suspense>\n              </CardLight>\n            </Box>\n\n            {/* main stat */}\n            <Box component=\"div\" display=\"flex\">\n              <DropdownButton startIcon={artifact?.mainStatKey ? StatIcon[artifact.mainStatKey] : undefined}\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={color} >\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\n                    <StatColoredWithUnit statKey={mainStatK} />\n                  </MenuItem>)}\n              </DropdownButton>\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\n                <Typography color=\"text.secondary\">\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\n                </Typography>\n              </CardLight>\n            </Box>\n\n            {/* Current/Max Substats Efficiency */}\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\n\n            {/* Image OCR */}\n            {allowUpload && <CardLight>\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n                {/* TODO: artifactDispatch not overwrite */}\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\n                  <Grid container spacing={1} alignItems=\"center\">\n                    <Grid item flexGrow={1}>\n                      <label htmlFor=\"contained-button-file\">\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\n                          Upload Screenshot (or Ctrl-V)\n                        </Button>\n                      </label>\n                    </Grid>\n                    <Grid item>\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => setModalShow(true)}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\n                    </Grid>\n                  </Grid>\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\n                  </Box>}\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\n                    {!firstProcessed && firstOutstanding && <Grid item>\n                      <CircularProgress size=\"1em\" />\n                    </Grid>}\n                    <Grid item flexGrow={1}>\n                      <Typography>\n                        <span>\n                          Screenshots in file-queue: <b>{remaining}</b>\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\n                        </span>\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\n                    </Grid>\n                  </Grid></CardDark>}\n                </Suspense>\n              </CardContent>\n            </CardLight>}\n          </Grid>\n\n          {/* Right column */}\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n            {/* substat selections */}\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cArtifact} setSubstat={setSubstat} />)}\n            {texts && <CardLight><CardContent>\n              <div>{texts.slotKey}</div>\n              <div>{texts.mainStatKey}</div>\n              <div>{texts.mainStatVal}</div>\n              <div>{texts.rarity}</div>\n              <div>{texts.level}</div>\n              <div>{texts.substats}</div>\n              <div>{texts.setKey}</div>\n            </CardContent></CardLight>}\n          </Grid>\n        </Grid>\n\n        {/* Duplicate/Updated/Edit UI */}\n        {old && <Grid container sx={{ justifyContent: \"space-around\" }} spacing={1} >\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\n            <ArtifactCard artifactObj={old} />\n          </CardLight></Grid>\n          {grmd && <Grid item md={1} display=\"flex\" alignItems=\"center\" justifyContent=\"center\" >\n            <CardLight sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></CardLight>\n          </Grid>}\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\n            <ArtifactCard artifactObj={cArtifact} />\n          </CardLight></Grid>\n        </Grid>}\n\n        {/* Error alert */}\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" >{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\n\n        {/* Buttons */}\n        <Grid container spacing={2}>\n          <Grid item>\n            {oldType === \"edit\" ?\n              <Button startIcon={<Add />} onClick={() => {\n                database.arts.set(old!.id, editorArtifact!);\n                if (allowEmpty) reset()\n                else {\n                  setShow(false)\n                  cancelEdit()\n                }\n              }} disabled={!editorArtifact || !isValid} color=\"primary\">\n                {t`editor.btnSave`}\n              </Button> :\n              <Button startIcon={<Add />} onClick={() => {\n                database.arts.new(artifact!);\n                if (allowEmpty) reset()\n                else {\n                  setShow(false)\n                  cancelEdit()\n                }\n              }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\n                {t`editor.btnAdd`}\n              </Button>}\n          </Grid>\n          <Grid item flexGrow={1}>\n            {allowEmpty && <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>}\n          </Grid>\n          <Grid item>\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\n          </Grid>\n          {old && oldType !== \"edit\" && <Grid item>\n            <Button startIcon={<Update />} onClick={() => { database.arts.set(old.id, editorArtifact!); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\n          </Grid>}\n        </Grid>\n      </CardContent>\n    </CardDark ></Suspense>\n  </ModalWrapper>\n}\n"],"names":["MenuItemWithImage","value","image","text","theme","isSelected","addlElement","props","MenuItem","ListItemIcon","ListItemText","primaryTypographyProps","style","fontWeight","typography","fontWeightMedium","fontWeightRegular","ArtifactMultiAutocomplete","allArtifactKeysWithGrouper","selectedArtifactKeys","setArtifactKeys","getName","getImage","label","useTheme","options","useMemo","map","key","grouper","Autocomplete","autoHighlight","multiple","disableCloseOnSelect","onChange","_","v","getOptionLabel","option","isOptionEqualToValue","renderInput","params","TextField","variant","InputLabelProps","color","palette","primary","length","type","renderOption","KeyMap","includes","renderTags","selected","getTagProps","index","element","allElementsWithPhy","ele","undefined","Chip","icon","ArtifactSetMultiAutocomplete","artSetKeys","setArtSetKeys","artifactSheets","usePromise","ArtifactSheet","t","useTranslation","allArtifactSetsAndRarities","Object","entries","flatMap","rarity","set","sort","sortByRarityAndName","nameRaw","defIcon","groupBy","toString","renderGroup","group","List","component","Box","ListSubheader","sx","top","stars","children","ArtifactMainStatMultiAutocomplete","mainStatKeys","setMainStatKeys","allMainStatKeys","StatIcon","ArtifactSubstatMultiAutocomplete","substatKeys","setSubstatKeys","allSubstatKeys","ArtifactSingleAutocomplete","selectedArtifactKey","setArtifactKey","disable","showDefault","defaultText","defaultIcon","concat","clearIcon","event","newValue","reason","getOptionDisabled","startAdornment","hasValue","ArtifactSetSingleAutocomplete","artSetKey","setArtSetKey","a","b","aName","i18n","bName","DisabledButton","styled","Button","backgroundColor","dark","secondary","TextButton","disabled","ArtifactRarityDropdown","filter","DropdownButton","title","onClick","ArtifactSlotDropdown","slotKey","hasUnselect","startIcon","artifactSlotIcon","Replay","Divider","allSlotKeys","CustomNumberTextField","float","useState","state","setState","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","e","target","onBlur","onKeyDown","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","py","px","Grid","container","spacing","item","flexGrow","InfoTooltip","Typography","Trans","i18nKey","xs","PercentBadge","SubstatInput","artifact","setSubstat","mainStatKey","substats","rolls","accurateValue","reduce","unit","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","display","ButtonGroup","size","width","whiteSpace","k","CustomNumberInput","flexBasis","placeholder","inputProps","textAlign","i","cacheValueString","artifactSubstatRollCorrection","clamp","p","SqBadge","count","val","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","src","Snippet","height","gutterBottom","href","rel","scan_art_main","large","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","Array","fill","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","img","Image","onload","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","Math","floor","bottomOpts","rectangle","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","setKey","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatVal","mainStatValScore","push","chosen","resultMainStatVal","every","other","add","unknownText","name","detectedText","inferredText","addText","available","recommended","ambiguousText","valueStrFunc","find","results","allArtifactSets","hammingDistance","replace","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","disableSet","disableSlot","database","useContext","DatabaseContext","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","arts","followAny","useReducer","editorArtifact","artifactDispatch","validateArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","disableEditSlot","numProcessing","min","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","get","old","oldType","findDups","duplicated","upgraded","errors","validated","cachedArtifact","cArtifact","deepClone","sheet","reset","update","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","grmd","useMediaQuery","breakpoints","up","updateSetKey","setACDisable","Suspense","fallback","Skeleton","CardHeader","flexDirection","gap","columns","mb","disableClearable","borderBottomRightRadius","shape","borderRadius","borderBottomLeftRadius","id","mr","my","margin","l","keys","getSlotName","ImgIcon","slotIcons","mainStatK","statKey","alignItems","htmlFor","accept","PhotoCamera","minWidth","faQuestionCircle","justifyContent","maxWidth","pl","CircularProgress","lg","ArtifactCard","artifactObj","ChevronRight","fontSize","Add","new","confirm","process","Update"],"sourceRoot":""}
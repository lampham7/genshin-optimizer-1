{"version":3,"file":"static/js/377.31dbef15.chunk.js","mappings":"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","sources":["PageCharacter/index.tsx","../node_modules/@mui/icons-material/esm/FactCheck.js","../node_modules/@mui/icons-material/esm/FavoriteBorder.js","../node_modules/@mui/icons-material/esm/Science.js","../node_modules/@mui/icons-material/esm/TrendingUp.js"],"sourcesContent":["import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { DeleteForever, FactCheck, Groups, Science, TrendingUp } from '@mui/icons-material';\nimport { Box, Button, CardContent, Divider, Grid, IconButton, Pagination, Skeleton, TextField, Typography } from '@mui/material';\nimport { ChangeEvent, Suspense, useCallback, useContext, useDeferredValue, useEffect, useMemo, useRef, useState } from 'react';\nimport ReactGA from 'react-ga4';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\nimport CardDark from '../Components/Card/CardDark';\nimport CharacterCard from '../Components/Character/CharacterCard';\nimport SortByButton from '../Components/SortByButton';\nimport ElementToggle from '../Components/ToggleButton/ElementToggle';\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle';\nimport CharacterSheet from '../Data/Characters/CharacterSheet';\nimport { DatabaseContext } from '../Database/Database';\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\nimport useDBMeta from '../ReactHooks/useDBMeta';\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\nimport useMediaQueryUp from '../ReactHooks/useMediaQueryUp';\nimport usePromise from '../ReactHooks/usePromise';\nimport { CharacterKey, charKeyToCharName } from '../Types/consts';\nimport { characterFilterConfigs, characterSortConfigs, characterSortMap } from '../Util/CharacterSort';\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\nimport { clamp } from '../Util/Util';\nimport { CharacterSelectionModal } from './CharacterSelectionModal';\n\nconst columns = { xs: 1, sm: 2, md: 3, lg: 4, xl: 4 }\nconst numToShowMap = { xs: 6 - 1, sm: 8 - 1, md: 12 - 1, lg: 16 - 1, xl: 16 - 1 }\nconst sortKeys = Object.keys(characterSortMap)\n\nexport default function PageCharacter() {\n  const { t } = useTranslation([\"page_character\", \"charNames_gen\"])\n  const { database } = useContext(DatabaseContext)\n  const [state, setState] = useState(() => database.displayCharacter.get())\n  useEffect(() => database.displayCharacter.follow((r, s) => setState(s)), [database, setState])\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n  const invScrollRef = useRef<HTMLDivElement>(null)\n  const setPage = useCallback(\n    (_: ChangeEvent<unknown>, value: number) => {\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\n      database.displayCharacter.set({ pageIndex: value - 1 });\n    },\n    [database, invScrollRef]\n  )\n\n  const brPt = useMediaQueryUp()\n  const maxNumToDisplay = numToShowMap[brPt]\n\n  const [newCharacter, setnewCharacter] = useState(false)\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  // Set follow, should run only once\n  useEffect(() => {\n    ReactGA.send({ hitType: \"pageview\", page: '/characters' })\n    return database.chars.followAny((k, r) => (r === \"new\" || r === \"remove\") && forceUpdate())\n  }, [forceUpdate, database])\n\n  // character favorite updater\n  useEffect(() => database.charMeta.followAny(s => forceUpdate()), [forceUpdate, database])\n\n  const characterSheets = usePromise(() => CharacterSheet.getAll, [])\n  const { gender } = useDBMeta()\n  const deleteCharacter = useCallback(async (cKey: CharacterKey) => {\n    const chararcterSheet = await CharacterSheet.get(cKey, gender)\n    let name = chararcterSheet?.name\n    // Use translated string\n    if (typeof name === \"object\")\n      name = t(`charNames_gen:${charKeyToCharName(cKey, gender)}`)\n\n    if (!window.confirm(t(\"removeCharacter\", { value: name }))) return\n    database.chars.remove(cKey)\n  }, [database, gender, t])\n\n  const editCharacter = useCharSelectionCallback()\n\n  const navigate = useNavigate()\n\n  const deferredState = useDeferredValue(state)\n  const deferredDbDirty = useDeferredValue(dbDirty)\n  const { charKeyList, totalCharNum } = useMemo(() => {\n    const chars = database.chars.keys\n    const totalCharNum = chars.length\n    if (!characterSheets) return { charKeyList: [], totalCharNum }\n    const { element, weaponType, sortType, ascending } = deferredState\n    const charKeyList = database.chars.keys\n      .filter(filterFunction({ element, weaponType, name: deferredSearchTerm }, characterFilterConfigs(database, characterSheets)))\n      .sort(sortFunction(characterSortMap[sortType] ?? [], ascending, characterSortConfigs(database, characterSheets), [\"new\", \"favorite\"]))\n    return deferredDbDirty && { charKeyList, totalCharNum }\n  },\n    [deferredDbDirty, database, characterSheets, deferredState, deferredSearchTerm])\n\n  const { weaponType, element, sortType, ascending, pageIndex = 0 } = state\n\n  const { charKeyListToShow, numPages, currentPageIndex } = useMemo(() => {\n    const numPages = Math.ceil(charKeyList.length / maxNumToDisplay)\n    const currentPageIndex = clamp(pageIndex, 0, numPages - 1)\n    return { charKeyListToShow: charKeyList.slice(currentPageIndex * maxNumToDisplay, (currentPageIndex + 1) * maxNumToDisplay), numPages, currentPageIndex }\n  }, [charKeyList, pageIndex, maxNumToDisplay])\n\n  const totalShowing = charKeyList.length !== totalCharNum ? `${charKeyList.length}/${totalCharNum}` : `${totalCharNum}`\n\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n    <CardDark ref={invScrollRef} ><CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n      <Grid container spacing={1}>\n        <Grid item>\n          <WeaponToggle sx={{ height: \"100%\" }} onChange={weaponType => database.displayCharacter.set({ weaponType })} value={weaponType} size=\"small\" />\n        </Grid>\n        <Grid item>\n          <ElementToggle sx={{ height: \"100%\" }} onChange={element => database.displayCharacter.set({ element })} value={element} size=\"small\" />\n        </Grid>\n        <Grid item flexGrow={1}>\n          <TextField\n            autoFocus\n            value={searchTerm}\n            onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setSearchTerm(e.target.value)}\n            label={t(\"characterName\")}\n            size=\"small\"\n            sx={{ height: \"100%\" }}\n            InputProps={{\n              sx: { height: \"100%\" }\n            }}\n          />\n        </Grid>\n        <Grid item >\n          <SortByButton sx={{ height: \"100%\" }}\n            sortKeys={sortKeys} value={sortType} onChange={sortType => database.displayCharacter.set({ sortType })}\n            ascending={ascending} onChangeAsc={ascending => database.displayCharacter.set({ ascending })} />\n        </Grid>\n      </Grid>\n      <Grid container alignItems=\"flex-end\">\n        <Grid item flexGrow={1}>\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\n        </Grid>\n        <Grid item>\n          <ShowingCharacter numShowing={charKeyListToShow.length} total={totalShowing} t={t} />\n        </Grid>\n      </Grid>\n    </CardContent></CardDark>\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} />}>\n      <Grid container spacing={1} columns={columns}>\n        <Grid item xs={1} >\n          <CardDark sx={{ height: \"100%\", minHeight: 400, width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n            <CardContent>\n              <Typography sx={{ textAlign: \"center\" }}><Trans t={t} i18nKey=\"addNew\" /></Typography>\n            </CardContent>\n            <CharacterSelectionModal newFirst show={newCharacter} onHide={() => setnewCharacter(false)} onSelect={editCharacter} />\n            <Box sx={{\n              flexGrow: 1,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            }}\n            >\n              <Button onClick={() => setnewCharacter(true)} color=\"info\" sx={{ borderRadius: \"1em\" }}>\n                <Typography variant=\"h1\"><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></Typography>\n              </Button>\n            </Box>\n          </CardDark>\n        </Grid>\n        {charKeyListToShow.map(charKey =>\n          <Grid item key={charKey} xs={1} >\n            <CharacterCard\n              characterKey={charKey}\n              onClick={() => navigate(`${charKey}`)}\n              footer={<><Divider /><Box sx={{ py: 1, px: 2, display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.talent\")}</Typography>}>\n                  <IconButton onClick={() => navigate(`${charKey}/talent`)}>\n                    <FactCheck />\n                  </IconButton>\n                </BootstrapTooltip>\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.teambuffs\")}</Typography>}>\n                  <IconButton onClick={() => navigate(`${charKey}/teambuffs`)} >\n                    <Groups />\n                  </IconButton>\n                </BootstrapTooltip>\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.optimize\")}</Typography>}>\n                  <IconButton onClick={() => navigate(`${charKey}/optimize`)} >\n                    <TrendingUp />\n                  </IconButton>\n                </BootstrapTooltip>\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"tabs.theorycraft\")}</Typography>}>\n                  <IconButton onClick={() => navigate(`${charKey}/theorycraft`)} >\n                    <Science />\n                  </IconButton>\n                </BootstrapTooltip>\n                <Divider orientation=\"vertical\" />\n                <BootstrapTooltip placement=\"top\" title={<Typography>{t(\"delete\")}</Typography>}>\n                  <IconButton color=\"error\" onClick={() => deleteCharacter(charKey)}>\n                    <DeleteForever />\n                  </IconButton>\n                </BootstrapTooltip>\n              </Box></>}\n            />\n          </Grid>)}\n      </Grid>\n    </Suspense>\n    {numPages > 1 && <CardDark ><CardContent>\n      <Grid container alignItems=\"flex-end\">\n        <Grid item flexGrow={1}>\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\n        </Grid>\n        <Grid item>\n          <ShowingCharacter numShowing={charKeyListToShow.length} total={totalShowing} t={t} />\n        </Grid>\n      </Grid>\n    </CardContent></CardDark>}\n  </Box>\n}\nfunction ShowingCharacter({ numShowing, total, t }) {\n  return <Typography color=\"text.secondary\">\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\n      Showing <b>{{ count: numShowing }}</b> out of {{ value: total }} Characters\n    </Trans>\n  </Typography>\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M20 3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM10 17H5v-2h5v2zm0-4H5v-2h5v2zm0-4H5V7h5v2zm4.82 6L12 12.16l1.41-1.41 1.41 1.42L17.99 9l1.42 1.42L14.82 15z\"\n}), 'FactCheck');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"\n}), 'FavoriteBorder');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.8 18.4 14 10.67V6.5l1.35-1.69c.26-.33.03-.81-.39-.81H9.04c-.42 0-.65.48-.39.81L10 6.5v4.17L4.2 18.4c-.49.66-.02 1.6.8 1.6h14c.82 0 1.29-.94.8-1.6z\"\n}), 'Science');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m16 6 2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"\n}), 'TrendingUp');"],"names":["columns","xs","sm","md","lg","xl","numToShowMap","sortKeys","Object","keys","characterSortMap","PageCharacter","t","useTranslation","database","useContext","DatabaseContext","useState","displayCharacter","get","state","setState","useEffect","follow","r","s","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","invScrollRef","useRef","setPage","useCallback","_","value","current","scrollIntoView","behavior","set","pageIndex","brPt","useMediaQueryUp","maxNumToDisplay","newCharacter","setnewCharacter","useForceUpdate","dbDirty","forceUpdate","ReactGA","hitType","page","chars","followAny","k","charMeta","characterSheets","usePromise","CharacterSheet","gender","useDBMeta","deleteCharacter","cKey","chararcterSheet","name","charKeyToCharName","window","confirm","remove","editCharacter","useCharSelectionCallback","navigate","useNavigate","deferredState","deferredDbDirty","useMemo","totalCharNum","length","charKeyList","element","weaponType","sortType","ascending","filter","filterFunction","characterFilterConfigs","sort","sortFunction","characterSortConfigs","numPages","Math","ceil","currentPageIndex","clamp","charKeyListToShow","slice","totalShowing","my","display","flexDirection","gap","ref","sx","container","spacing","item","height","onChange","size","flexGrow","autoFocus","e","target","label","InputProps","onChangeAsc","alignItems","count","ShowingCharacter","numShowing","total","Suspense","fallback","variant","width","minHeight","textAlign","i18nKey","newFirst","show","onHide","onSelect","justifyContent","onClick","color","borderRadius","icon","faPlus","className","map","charKey","characterKey","footer","py","px","placement","title","orientation","createSvgIcon","_jsx","fillRule","d"],"sourceRoot":""}
{"version":3,"file":"static/js/569.2493ea9f.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ImportExport.js","../node_modules/@mui/icons-material/esm/Upload.js","../node_modules/@mui/icons-material/esm/Delete.js","Database/exim.ts","Database/exports/good.ts","../node_modules/@mui/icons-material/esm/FileOpen.js","Database/imports/good.ts","PageSettings/UploadCard.tsx","PageSettings/DatabaseCard.tsx","PageSettings/LanguageCard.tsx","PageSettings/index.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 3 5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"\n}), 'ImportExport');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import type { IArtifact } from \"../Types/artifact\"\nimport type { ICharacter } from \"../Types/character\"\nimport type { IWeapon } from \"../Types/weapon\"\nimport { BuildSetting } from \"./Data/BuildsettingData\"\n\nexport const GOSource = \"Genshin Optimizer\" as const\n\nfunction newCounter<T>(): ImportResultCounter<T> {\n  return { import: 0, invalid: [], new: [], update: [], unchanged: [], upgraded: [], remove: [], notInImport: 0, beforeMerge: 0 }\n}\n\nexport function newImportResult(source: string): ImportResult {\n  return { type: \"GOOD\", source, artifacts: newCounter(), weapons: newCounter(), characters: newCounter() }\n}\nexport type IGOOD = {\n  format: \"GOOD\"\n  source: string\n  version: 1\n  characters?: any[]\n  artifacts?: any[]\n  weapons?: any[]\n}\nexport type IGO = {\n  dbVersion: number\n  source: typeof GOSource\n  states?: Array<object & { key: string }>\n  buildSettings?: Array<BuildSetting & { key: string }>\n}\n\nexport type ImportResultCounter<T> = {\n  import: number, // total # in file\n  new: T[],\n  update: T[], // Use new object\n  unchanged: T[], // Use new object\n  upgraded: T[],\n  remove: T[],\n  invalid: T[],\n  notInImport: number,\n  beforeMerge: number,\n}\nexport type ImportResult = {\n  type: \"GOOD\",\n  source: string,\n  artifacts: ImportResultCounter<IArtifact>,\n  weapons: ImportResultCounter<IWeapon>,\n  characters: ImportResultCounter<ICharacter>,\n}\n","\nimport { DBStorage } from \"../DBStorage\";\nimport { BuildSetting } from \"../Data/BuildsettingData\";\nimport { GOSource, IGO, IGOOD } from \"../exim\";\nimport { currentDBVersion } from \"../imports/migrate\";\n\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\n  const artifactIDs = new Map<string, number>()\n  const artifacts = storage.entries\n    .filter(([key]) => key.startsWith(\"artifact_\"))\n    .map(([id, value], i) => {\n      artifactIDs.set(id, i)\n      return JSON.parse(value)\n    })\n  return {\n    format: \"GOOD\",\n    dbVersion: currentDBVersion,\n    source: GOSource,\n    version: 1,\n    characters: storage.entries\n      .filter(([key]) => key.startsWith(\"char_\"))\n      .map(([_, value]) => JSON.parse(value)),\n    artifacts,\n    weapons: storage.entries\n      .filter(([key]) => key.startsWith(\"weapon_\"))\n      .map(([_, value]) => JSON.parse(value)),\n    states: storage.entries\n      .filter(([key]) => key.startsWith(\"state_\"))\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"state_\")[1] })),\n    buildSettings: storage.entries\n      .filter(([key]) => key.startsWith(\"buildSetting_\"))\n      .map(([key, value]) => {\n        const result: BuildSetting & { key: string } = { ...JSON.parse(value), key: key.split(\"buildSetting_\")[1] }\n        // Make sure the artifact ids match the new ids after import\n        result.builds = result.builds.map(x => x.map(x => artifactIDs.has(x) ? `artifact_${artifactIDs.get(x)}` : \"\").filter(x => x))\n        return result\n      }),\n  }\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-2 .9-2 2v16c0 1.1.89 2 1.99 2H15v-8h5V8l-6-6zm-1 7V3.5L18.5 9H13zm4 12.66V16h5.66v2h-2.24l2.95 2.95-1.41 1.41L19 19.41v2.24h-2z\"\n}), 'FileOpen');","import { allCharacterKeys, CharacterKey } from \"../../Types/consts\";\nimport { ArtCharDatabase } from \"../Database\";\nimport { SandboxStorage } from \"../DBStorage\";\nimport { GOSource, IGO, IGOOD, ImportResult, newImportResult } from \"../exim\";\nimport { exportGOOD } from \"../exports/good\";\nimport { migrate } from \"./migrate\";\n\n// MIGRATION STEP: Always keep parsing in sync with GOODv1 format\n\nexport function importGOOD(good: IGOOD, base: ArtCharDatabase, keepNotInImport: boolean, ignoreDups: boolean): ImportResult | undefined {\n  switch (good.version) {\n    case 1: return importGOOD1(good, base, keepNotInImport, ignoreDups)\n  }\n}\n\nexport function importAndMigrateGOOD(good: IGOOD & IGO): IGOOD & IGO {\n  const storage = new SandboxStorage()\n  const source = good.source\n\n  good.dbVersion ? storage.setDBVersion(good.dbVersion) : storage.setDBVersion(8)\n  if (good.characters) good.characters.forEach(c => c.key && storage.set(`char_${c.key}`, c));\n  if (good.artifacts) good.artifacts.forEach((a, i) => storage.set(`artifact_${i}`, a))\n  if (good.weapons) good.weapons.forEach((a, i) => storage.set(`weapon_${i}`, a))\n  if (good.states) good.states.forEach(a => a.key && storage.set(`state_${a.key}`, a))\n  if (good.buildSettings) good.buildSettings.forEach(a => a.key && storage.set(`buildSetting_${a.key}`, a))\n\n  migrate(storage)\n  good = exportGOOD(storage)\n  good.source = source\n  return good\n}\n\n/**\n * Parse GOODv1 data format into a parsed data of the version specified in `data`.\n * If the DB version is not specified, the default version is used.\n */\nfunction importGOOD1(good: IGOOD, base: ArtCharDatabase, keepNotInImport: boolean, ignoreDups: boolean): ImportResult | undefined {\n  good = importAndMigrateGOOD(good as IGOOD & IGO)\n  const source = good.source ?? \"Unknown\"\n  const result: ImportResult = newImportResult(source)\n\n  result.characters.beforeMerge = base.chars.values.length\n  result.weapons.beforeMerge = base.weapons.values.length\n  result.artifacts.beforeMerge = base.arts.values.length\n\n  const callback = (rkey: \"artifacts\" | \"weapons\" | \"characters\") => (key, reason, value) => result[rkey][reason].push(value)\n\n  const charUnfollow = base.chars.followAny((key, reason, value) => {\n    const arr = result.characters[reason]\n    const ind = arr.findIndex(c => c?.key === key)\n    if (ind < 0) arr.push(value)\n    else arr[ind] = value\n  })\n  const artUnfollow = base.arts.followAny(callback(\"artifacts\"))\n  const weaponUnfollow = base.weapons.followAny(callback(\"weapons\"))\n\n  /* IMPORTANT: import data in characters, weapons, artifacts order. */\n  // import characters\n  const characters = good.characters\n  if (characters?.length) {\n    result.characters.import = characters.length\n    const idsToRemove = new Set(base.chars.keys)\n    characters.forEach(c => {\n      if (!c.key) result.characters.invalid.push(c)\n      idsToRemove.delete(c.key)\n      if (base.chars.hasDup(c, source === GOSource))\n        result.characters.unchanged.push(c)\n      else base.chars.set(c.key, c)\n    })\n\n    const idtoRemoveArr = Array.from(idsToRemove)\n    if (keepNotInImport || ignoreDups) result.characters.notInImport = idtoRemoveArr.length\n    else idtoRemoveArr.forEach(k => base.chars.remove(k))\n    result.characters.unchanged = []\n  } else result.characters.notInImport = base.chars.values.length\n\n  // Match weapons for counter, metadata, and locations.\n  const weapons = good.weapons\n  if (weapons?.length) {\n    result.weapons.import = weapons.length\n    const idsToRemove = new Set(base.weapons.values.map(w => w.id))\n    const hasEquipment = weapons.some(w => w.location)\n    weapons.forEach(w => {\n      const weapon = base.weapons.validate(w)\n      if (!weapon) return result.weapons.invalid.push(w)\n      let { duplicated, upgraded } = ignoreDups ? { duplicated: [], upgraded: [] } : base.weapons.findDup(weapon)\n      // Don't reuse dups/upgrades\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\n\n      if (duplicated[0] || upgraded[0]) {\n        const match = duplicated[0] || upgraded[0]\n        idsToRemove.delete(match.id)\n        if (duplicated[0]) result.weapons.unchanged.push(weapon)\n        else if (upgraded[0]) result.weapons.upgraded.push(weapon)\n        base.weapons.set(match.id, { ...weapon, location: hasEquipment ? weapon.location : match.location })\n      } else\n        base.weapons.new(weapon)\n    })\n    const idtoRemoveArr = Array.from(idsToRemove)\n    if (keepNotInImport || ignoreDups) result.weapons.notInImport = idtoRemoveArr.length\n    else idtoRemoveArr.forEach(k => base.weapons.remove(k))\n  } else result.weapons.notInImport = base.weapons.values.length\n\n  // Match artifacts for counter, metadata, and locations\n  const artifacts = good.artifacts\n  const importArtIds = new Map<string, string>()\n  if (artifacts?.length) {\n    result.artifacts.import = artifacts.length\n    const idsToRemove = new Set(base.arts.values.map(a => a.id))\n    const hasEquipment = artifacts.some(a => a.location)\n    artifacts.forEach((a, i) => {\n      const art = base.arts.validate(a)\n      if (!art) return result.artifacts.invalid.push(a)\n      let { duplicated, upgraded } = ignoreDups ? { duplicated: [], upgraded: [] } : base.arts.findDups(art)\n\n      // Don't reuse dups/upgrades\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\n\n      if (duplicated[0] || upgraded[0]) {\n        const match = duplicated[0] || upgraded[0]\n        idsToRemove.delete(match.id)\n        if (duplicated[0]) result.artifacts.unchanged.push(art)\n        else if (upgraded[0]) result.artifacts.upgraded.push(art)\n        base.arts.set(match.id, { ...art, location: hasEquipment ? art.location : match.location })\n        importArtIds.set(`artifact_${i}`, match.id)\n      } else\n        importArtIds.set(`artifact_${i}`, base.arts.new(art))\n    })\n    const idtoRemoveArr = Array.from(idsToRemove)\n    if (keepNotInImport || ignoreDups) result.artifacts.notInImport = idtoRemoveArr.length\n    else idtoRemoveArr.forEach(k => base.arts.remove(k))\n  } else result.artifacts.notInImport = base.arts.values.length\n\n  base.weapons.ensureEquipment()\n\n  // stop listening to callbacks\n  charUnfollow()\n  artUnfollow()\n  weaponUnfollow()\n\n  // import extras\n  const states = (good as unknown as IGO).states\n  if (states) states.forEach(s => {\n    const { key, ...rest } = s as any\n    if (!key) return\n    base.states.set(key, rest)\n  })\n\n  const buildSettings = (good as unknown as IGO).buildSettings\n  if (buildSettings) buildSettings.forEach(b => {\n    const { key, ...rest } = b\n    if (!key || !allCharacterKeys.includes(key as CharacterKey)) return\n    if (rest.builds) //preserve the old build ids\n      rest.builds = rest.builds.map(build => build.map(i => importArtIds.get(i) ?? \"\"))\n\n    base.buildSettings.set(key as CharacterKey, { ...rest })\n  })\n  return result\n}\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { CheckBox, CheckBoxOutlineBlank, FileOpen } from '@mui/icons-material'\nimport { Box, Button, CardContent, Divider, Grid, styled, Tooltip, Typography } from '@mui/material'\nimport { useCallback, useContext, useMemo, useState } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport CardDark from '../Components/Card/CardDark'\nimport CardLight from '../Components/Card/CardLight'\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\nimport { SandboxStorage } from '../Database/DBStorage'\nimport { ImportResult, ImportResultCounter } from '../Database/exim'\nimport { importGOOD } from '../Database/imports/good'\n\nconst InvisInput = styled('input')({\n  display: 'none',\n});\n\nexport default function UploadCard({ onReplace }: { onReplace: () => void }) {\n  const { database } = useContext(DatabaseContext)\n  const { t } = useTranslation(\"settings\");\n  const [data, setdata] = useState(\"\")\n  const [filename, setfilename] = useState(\"\")\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\n  const [keepNotInImport, setKeepNotInImport] = useState(false)\n  const [ignoreDups, setIgnoreDups] = useState(false)\n  const { importResult, importedDatabase } = useMemo(() => {\n    if (!data) return\n    let parsed: any\n    try {\n      parsed = JSON.parse(data)\n      if (typeof parsed !== \"object\") {\n        setErrorMsg(\"uploadCard.error.jsonParse\")\n        return\n      }\n    } catch (e) {\n      setErrorMsg(\"uploadCard.error.jsonParse\")\n      return\n    }\n    // Figure out the file format\n    if (parsed.format === \"GOOD\") {\n      // Parse as GOOD format\n      const copyStorage = new SandboxStorage()\n      copyStorage.copyFrom(database.storage)\n      const importedDatabase = new ArtCharDatabase(copyStorage)\n      const importResult = importGOOD(parsed, importedDatabase, keepNotInImport, ignoreDups)\n      if (!importResult) {\n        setErrorMsg(\"uploadCard.error.goInvalid\")\n        return\n      }\n\n      return { importResult, importedDatabase }\n    }\n    setErrorMsg(\"uploadCard.error.unknown\")\n    return\n  }, [data, database, keepNotInImport, ignoreDups]) ?? {}\n  const reset = () => {\n    setdata(\"\")\n    setfilename(\"\")\n    onReplace()\n  }\n  const onUpload = async e => {\n    const file = e.target.files[0]\n    e.target.value = null // reset the value so the same file can be uploaded again...\n    if (file) setfilename(file.name)\n    const reader = new FileReader()\n    reader.onload = () => setdata(reader.result as string)\n    reader.readAsText(file)\n  }\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\n    <CardContent>\n      <Grid container spacing={2} sx={{ mb: 1 }}>\n        <Grid item>\n          <label htmlFor=\"icon-button-file\">\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\n            <Button component=\"span\" color=\"info\" startIcon={<FileOpen />}>{t`uploadCard.buttons.open`}</Button>\n          </label>\n        </Grid>\n        <Grid item flexGrow={1}>\n          <CardDark sx={{ px: 2, py: 1 }}>\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\n          </CardDark>\n        </Grid>\n      </Grid>\n      <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\n        <Tooltip title={<Typography>\n          {ignoreDups ? t`uploadCard.tooltip.ignoreDup` : t`uploadCard.tooltip.detectdup`}\n        </Typography>} placement='top' arrow >\n          <Box sx={{ flexGrow: 1, flexBasis: \"10em\" }}><Button fullWidth disabled={!data} color={ignoreDups ? \"primary\" : \"success\"} onClick={() => setIgnoreDups(!ignoreDups)} startIcon={ignoreDups ? <CheckBoxOutlineBlank /> : <CheckBox />}>\n            {t`uploadCard.buttons.detectDups`}\n          </Button></Box>\n        </Tooltip>\n        <Tooltip title={<Typography>\n          {keepNotInImport ? t`uploadCard.tooltip.keepNotInImport` : t`uploadCard.tooltip.delNotInImport`}\n        </Typography>} placement='top' arrow >\n          <Box sx={{ flexGrow: 1, flexBasis: \"10em\" }}><Button fullWidth disabled={!data} color={keepNotInImport ? \"primary\" : \"success\"} onClick={() => setKeepNotInImport(!keepNotInImport)} startIcon={keepNotInImport ? <CheckBoxOutlineBlank /> : <CheckBox />} >\n            {t`uploadCard.buttons.delNotInImport`}\n          </Button></Box>\n        </Tooltip>\n      </Box>\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\n      {(importResult && importedDatabase) ? <GOODUploadInfo importResult={importResult} importedDatabase={importedDatabase} /> : t(errorMsg)}\n    </CardContent>\n    <GOUploadAction importedDatabase={importedDatabase} reset={reset} />\n  </CardLight>\n}\n\nfunction GOODUploadInfo({ importResult: { source, artifacts, characters, weapons }, importedDatabase }: { importResult: ImportResult, importedDatabase: ArtCharDatabase }) {\n  const { t } = useTranslation(\"settings\")\n  return <CardDark>\n    <CardContent sx={{ py: 1 }}>\n      <Typography>\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent >\n      <Grid container spacing={2}>\n        <Grid item flexGrow={1}>\n          <MergeResult result={artifacts} dbTotal={importedDatabase.arts.values.length} type=\"arts\" />\n        </Grid>\n        <Grid item flexGrow={1}>\n          <MergeResult result={weapons} dbTotal={importedDatabase.weapons.values.length} type=\"weapons\" />\n        </Grid>\n        <Grid item flexGrow={1}>\n          <MergeResult result={characters} dbTotal={importedDatabase.chars.values.length} type=\"chars\" />\n        </Grid>\n      </Grid>\n    </CardContent>\n  </CardDark>\n}\nfunction MergeResult({ result, dbTotal, type }: { result: ImportResultCounter<any>, dbTotal: number, type: string }) {\n  const { t } = useTranslation(\"settings\")\n  const total = result.import\n  return <CardLight >\n    <CardContent sx={{ py: 1 }}>\n      <Typography>\n        <Trans t={t} i18nKey={`count.${type}`} /> {total}\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {total}</Typography>\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {total}</Typography>\n      <Typography><Trans t={t} i18nKey=\"count.upgraded\" /> <strong>{result.upgraded.length}</strong> / {total}</Typography>\n      {/* <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.update.length}</strong></Typography> */}\n      {!!result.remove.length && <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.remove.length}</strong></Typography>}\n      {!!result.notInImport && <Typography><Trans t={t} i18nKey=\"count.notInImport\" /> <strong>{result.notInImport}</strong></Typography>}\n      <Typography><Trans t={t} i18nKey=\"count.dbTotal\" /> <strong>{result.beforeMerge}</strong> -&gt; <strong>{dbTotal}</strong></Typography>\n      {!!result.invalid?.length && <div>\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {total}</Typography>\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\n      </div>}\n    </CardContent>\n  </CardLight>\n}\n\nfunction GOUploadAction({ importedDatabase, reset }: { importedDatabase?: ArtCharDatabase, reset: () => void }) {\n  const { database, setDatabase } = useContext(DatabaseContext)\n  const { t } = useTranslation(\"settings\")\n  const replaceDB = useCallback(() => {\n    if (!importedDatabase) return\n    database.clear()\n    database.storage.copyFrom(importedDatabase.storage)\n    setDatabase(new ArtCharDatabase(database.storage))\n    reset()\n  }, [database, importedDatabase, reset, setDatabase])\n\n\n  return <><Divider /><CardContent sx={{ py: 1 }}>\n    <Button color={importedDatabase ? \"success\" : \"error\"} disabled={!importedDatabase} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\n  </CardContent></>\n}\n","import { faClipboard } from '@fortawesome/free-solid-svg-icons'\nimport { Delete, Download, ImportExport, Upload } from '@mui/icons-material'\nimport { Button, CardContent, Chip, Divider, Grid, Typography } from '@mui/material'\nimport { Box } from '@mui/system'\nimport { useCallback, useContext, useEffect, useState } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport CardDark from '../Components/Card/CardDark'\nimport CardLight from '../Components/Card/CardLight'\nimport { StyledInputBase } from '../Components/CustomNumberInput'\nimport FontAwesomeSvgIcon from '../Components/FontAwesomeSvgIcon'\nimport ModalWrapper from '../Components/ModalWrapper'\nimport { dbMetaInit } from '../Database/Data/StateData'\nimport { ArtCharDatabase, DatabaseContext, DatabaseContextObj } from \"../Database/Database\"\nimport { ExtraStorage } from '../Database/DBStorage'\nimport { exportGOOD } from '../Database/exports/good'\nimport useBoolState from '../ReactHooks/useBoolState'\nimport useDBState from '../ReactHooks/useDBState'\nimport { range } from '../Util/Util'\nimport UploadCard from './UploadCard'\n\nexport default function DatabaseCard() {\n  const databaseContextObj = useContext(DatabaseContext)\n  const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\n  const { t } = useTranslation([\"settings\"]);\n\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Typography variant=\"subtitle1\">\n        {t`DatabaseCard.title`}\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n      <Grid container spacing={2} columns={{ xs: 1, md: 2, }}>\n        {range(1, 4).map(i => <Grid key={i} item xs={1}>\n          {i === dbIndex ? <DataCard index={i} /> :\n            <ExtraDatabaseWrapper index={i}>\n              <DataCard index={i} databaseContextObj={databaseContextObj} />\n            </ExtraDatabaseWrapper>}\n        </Grid>)}\n      </Grid>\n    </CardContent >\n  </CardLight >\n}\nfunction ExtraDatabaseWrapper({ index, children }) {\n  const [database, setDatabase] = useState(() => {\n    const dbName = `extraDatabase_${index}`\n    const storage = new ExtraStorage(dbName)\n    const dbObj = JSON.parse(localStorage.getItem(dbName) ?? `{ \"dbIndex\": \"${index}\" }`)\n    storage.setStorage(dbObj)\n\n    // A bit of preventive programming\n    storage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\n    const db = new ArtCharDatabase(storage)\n    storage.saveStorage()\n    return db\n  })\n\n  return <DatabaseContext.Provider value={{ database, setDatabase }}>\n    {children}\n  </DatabaseContext.Provider>\n}\n\nfunction DataCard({ index, databaseContextObj }: { index: number, databaseContextObj?: DatabaseContextObj }) {\n  const { database, setDatabase } = useContext(DatabaseContext)\n  const [{ name, lastEdit }, setDbMeta] = useDBState(\"dbMeta\", dbMetaInit(index))\n  const current = !databaseContextObj\n  const [uploadOpen, onOpen, onClose] = useBoolState()\n  const { t } = useTranslation([\"settings\"]);\n  const numChar = database.chars.keys.length\n  const numArt = database.arts.values.length\n  const numWeapon = database.weapons.values.length\n  const hasData = Boolean(numChar || numArt || numWeapon)\n  const copyToClipboard = useCallback(\n    () => navigator.clipboard.writeText(JSON.stringify(exportGOOD(database.storage)))\n      .then(() => alert(\"Copied database to clipboard.\"))\n      .catch(console.error),\n    [database],\n  )\n  const onUpload = useCallback(() => {\n    onClose()\n    if (!current) {\n      const storage = database.storage as ExtraStorage\n      storage.saveStorage()\n    }\n  }, [onClose, current, database.storage])\n\n  const onDelete = useCallback(() => {\n    if (!window.confirm(`Are you sure you want to delete \"${name}\"?`)) return\n    if (current) {\n      database.clear()\n      setDatabase(new ArtCharDatabase(database.storage))\n    } else {\n      const storage = database.storage as ExtraStorage\n      const dbName = storage.databaseName\n      const extraStorage = new ExtraStorage(dbName)\n      extraStorage.setStorage({})\n      setDatabase(new ArtCharDatabase(extraStorage))\n      localStorage.removeItem(dbName)\n    }\n  }, [database, current, name, setDatabase])\n\n  const download = useCallback(() => {\n    const date = new Date()\n    const dateStr = date.toISOString().split(\".\")[0].replace(\"T\", \"_\").replaceAll(\":\", \"-\")\n    const JSONStr = JSON.stringify(exportGOOD(database.storage))\n    const filename = `${name.trim().replaceAll(\" \", \"_\")}_${dateStr}.json`\n    const contentType = \"application/json;charset=utf-8\"\n    const a = document.createElement('a');\n    a.download = filename\n    a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\n    a.target = \"_blank\"\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n  }, [database, name])\n\n  const onSwap = useCallback(() => {\n    if (!databaseContextObj) return\n\n    // save current database to appropriate slot\n    const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\n    const tempStorage = new ExtraStorage(`extraDatabase_${dbIndex}`, databaseContextObj.database.storage)\n    tempStorage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\n    tempStorage.saveStorage()\n\n    // clear this slot database\n    const storage = database.storage as ExtraStorage\n    const dbName = storage.databaseName\n    localStorage.removeItem(dbName)\n\n    // swap over database\n    databaseContextObj.database.clear()\n    databaseContextObj.database.storage.copyFrom(database.storage)\n    databaseContextObj.database.storage.set(\"dbIndex\", index)\n    databaseContextObj.setDatabase(new ArtCharDatabase(databaseContextObj.database.storage))\n\n  }, [databaseContextObj, database, index])\n\n  const [tempName, setTempName] = useState(name)\n  useEffect(() => setTempName(name), [name])\n\n  const onBlur = useCallback(() => {\n    setDbMeta({ name: tempName })\n    if (!current) (database.storage as ExtraStorage).saveStorage()\n  }, [setDbMeta, tempName, database, current])\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\n\n  return <CardDark sx={{ height: \"100%\", boxShadow: current ? \"0px 0px 0px 2px green inset\" : undefined }}>\n    <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\n      < StyledInputBase value={tempName} sx={{ borderRadius: 1, px: 1, flexGrow: 1 }} onChange={(e) => setTempName(e.target.value)} onBlur={onBlur} onKeyDown={onKeyDOwn} />\n      {!current && <Button startIcon={<ImportExport />} onClick={onSwap} color=\"warning\">{t`DatabaseCard.button.swap`}</Button>}\n      <Chip color={current ? \"success\" : \"secondary\"} label={current ? t`DatabaseCard.currentDB` : `${t`DatabaseCard.title`} ${index}`} />\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Box display=\"flex\" gap={2}>\n        <Box flexGrow={1}>\n          <Typography noWrap><Trans t={t} i18nKey=\"count.chars\" /> <strong>{numChar}</strong></Typography>\n          <Typography noWrap><Trans t={t} i18nKey=\"count.arts\" /> <strong>{numArt}</strong></Typography>\n          <Typography noWrap><Trans t={t} i18nKey=\"count.weapons\" /> <strong>{numWeapon}</strong></Typography>\n          {!!lastEdit && <Typography noWrap><strong>{(new Date(lastEdit).toLocaleString())}</strong></Typography>}\n        </Box>\n        <Box>\n          <Grid container spacing={1} columns={{ xs: 2 }} >\n            <Grid item xs={1}>\n              <Button fullWidth disabled={!hasData} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeSvgIcon icon={faClipboard} />}>\n                <Trans t={t} i18nKey=\"DatabaseCard.button.copy\" />\n              </Button>\n            </Grid>\n            <Grid item xs={1}>\n              <ModalWrapper open={uploadOpen} onClose={onClose} >\n                <UploadCard onReplace={onUpload} />\n              </ModalWrapper>\n              <Button fullWidth component=\"span\" color=\"info\" startIcon={<Upload />} onClick={onOpen}>\n                {t`DatabaseCard.button.upload`}\n              </Button>\n            </Grid>\n            <Grid item xs={1}>\n              <Button fullWidth disabled={!hasData} onClick={download} startIcon={<Download />}>\n                {t`DatabaseCard.button.download`}\n              </Button>\n            </Grid>\n            <Grid item xs={1}>\n              <Button fullWidth disabled={!hasData} color=\"error\" onClick={onDelete} startIcon={<Delete />}>\n                {t`DatabaseCard.button.delete`}\n              </Button>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </CardContent>\n  </CardDark>\n}\n","import { CardContent, Divider, MenuItem } from '@mui/material'\nimport { Trans, useTranslation } from \"react-i18next\"\nimport CardLight from '../Components/Card/CardLight'\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\nimport SqBadge from '../Components/SqBadge'\nimport { languageCodeList } from \"../i18n\"\nexport default function LanguageCard() {\n  const { t } = useTranslation();\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <LanguageDropdown />\n    </CardContent>\n  </CardLight>\n}\n\nconst nativeLanguages = {\n  \"chs\": \"简体中文\",\n  \"cht\": \"繁體中文\",\n  \"de\": \"Deutsch\",\n  \"en\": \"English\",\n  \"es\": \"español\",\n  \"fr\": \"français\",\n  \"id\": \"Bahasa Indonesia\",\n  \"ja\": \"日本語\",\n  \"ko\": \"한국어\",\n  \"pt\": \"Português\",\n  \"ru\": \"Русский язык\",\n  \"th\": \"ภาษาไทย\",\n  \"vi\": \"Tiếng Việt\"\n}\nexport function LanguageDropdown() {\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\n  const currentLang = i18n.languages[0];\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\n      <Trans i18nKey={`languages:${lang}`} />\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\n    </MenuItem>)}\n  </DropdownButton>\n}\n","import { CardContent, Divider, Typography } from '@mui/material'\nimport ReactGA from 'react-ga4'\nimport { Trans, useTranslation } from \"react-i18next\"\nimport CardDark from '../Components/Card/CardDark'\nimport DatabaseCard from './DatabaseCard'\nimport LanguageCard from './LanguageCard'\n\nexport default function PageSettings() {\n  const { t } = useTranslation([\"settings\"]);\n  ReactGA.send({ hitType: \"pageview\", page: '/setting' })\n\n  return <CardDark sx={{ my: 1 }}>\n    <CardContent sx={{ py: 1 }}>\n      <Typography variant=\"subtitle1\">\n        <Trans t={t} i18nKey=\"title\" />\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n      <LanguageCard />\n      <DatabaseCard />\n    </CardContent>\n  </CardDark>\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');"],"names":["createSvgIcon","_jsx","d","GOSource","exportGOOD","storage","artifactIDs","Map","artifacts","entries","filter","startsWith","map","i","id","value","set","JSON","parse","format","dbVersion","currentDBVersion","source","version","characters","weapons","states","key","split","buildSettings","result","builds","x","has","get","importGOOD","good","base","keepNotInImport","ignoreDups","SandboxStorage","setDBVersion","forEach","c","a","migrate","importAndMigrateGOOD","type","import","invalid","new","update","unchanged","upgraded","remove","notInImport","beforeMerge","newImportResult","chars","values","length","arts","callback","rkey","reason","push","charUnfollow","followAny","arr","ind","findIndex","artUnfollow","weaponUnfollow","idsToRemove","Set","keys","delete","hasDup","idtoRemoveArr","Array","from","k","w","hasEquipment","some","location","weapon","validate","duplicated","findDup","match","importArtIds","art","findDups","ensureEquipment","s","rest","b","allCharacterKeys","build","importGOOD1","InvisInput","styled","display","UploadCard","onReplace","database","useContext","DatabaseContext","t","useTranslation","useState","data","setdata","filename","setfilename","errorMsg","setErrorMsg","setKeepNotInImport","setIgnoreDups","useMemo","parsed","e","copyStorage","copyFrom","importedDatabase","ArtCharDatabase","importResult","onUpload","file","target","files","name","reader","FileReader","onload","readAsText","CardLight","CardContent","sx","py","Trans","i18nKey","Grid","container","spacing","mb","item","htmlFor","accept","onChange","Button","component","color","startIcon","FileOpen","flexGrow","CardDark","px","Typography","icon","faFileCode","faArrowLeft","gap","flexWrap","Tooltip","title","placement","arrow","flexBasis","fullWidth","disabled","onClick","CheckBoxOutlineBlank","CheckBox","gutterBottom","variant","width","fontFamily","minHeight","resize","GOODUploadInfo","GOUploadAction","reset","Divider","MergeResult","dbTotal","total","stringify","undefined","setDatabase","replaceDB","useCallback","clear","faFileUpload","DatabaseCard","databaseContextObj","dbIndex","parseInt","getString","flexDirection","columns","xs","md","range","DataCard","index","ExtraDatabaseWrapper","children","dbName","ExtraStorage","dbObj","localStorage","getItem","setStorage","removeForKeys","db","saveStorage","Database","useDBState","dbMetaInit","lastEdit","setDbMeta","current","useBoolState","uploadOpen","onOpen","onClose","numChar","numArt","numWeapon","hasData","Boolean","copyToClipboard","navigator","clipboard","writeText","then","alert","catch","console","error","onDelete","window","confirm","databaseName","extraStorage","removeItem","download","dateStr","Date","toISOString","replace","replaceAll","JSONStr","trim","document","createElement","href","encodeURIComponent","body","appendChild","click","removeChild","onSwap","tempStorage","tempName","setTempName","useEffect","onBlur","onKeyDOwn","height","boxShadow","justifyContent","borderRadius","onKeyDown","ImportExport","Chip","label","Box","noWrap","toLocaleString","FontAwesomeSvgIcon","faClipboard","ModalWrapper","open","Upload","Download","Delete","LanguageCard","SqBadge","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","DropdownButton","language","languageCodeList","MenuItem","selected","PageSettings","ReactGA","hitType","page","my"],"sourceRoot":""}
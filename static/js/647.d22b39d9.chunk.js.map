{"version":3,"file":"static/js/647.d22b39d9.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactSetTooltip.tsx","Components/Artifact/SubstatToggle.tsx","Components/Character/LocationAutocomplete.tsx","Components/Character/LocationName.tsx","Components/Character/ThumbSide.tsx","Components/GeneralAutocomplete.tsx","Components/InfoTooltip.tsx","Components/PercentBadge.tsx","Components/SolidColoredTextfield.tsx","PageArtifact/ArtifactCard.tsx","PageArtifact/ArtifactSort.ts","PageArtifact/RollProbability.ts","ReactHooks/useArtifact.tsx"],"sourcesContent":["import { Box, Skeleton, Stack, Typography } from \"@mui/material\"\nimport { Suspense } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\"\nimport BootstrapTooltip from \"../BootstrapTooltip\"\nimport SqBadge from \"../SqBadge\"\nimport { Translate } from \"../Translate\"\n\nexport default function ArtifactSetTooltip({ children, artifactSheet, numInSet = 5 }: { children: JSX.Element, artifactSheet: ArtifactSheet, numInSet?: number }) {\n  return <BootstrapTooltip placement=\"top\" title={<ArtifactSetTooltipContent artifactSheet={artifactSheet} numInSet={numInSet} />} disableInteractive >\n    {children}\n  </BootstrapTooltip>\n}\nexport function ArtifactSetTooltipContent({ artifactSheet, numInSet = 5 }: { artifactSheet: ArtifactSheet, numInSet?: number }) {\n  return <Suspense fallback={<Skeleton variant='rectangular' width={100} height={100} />}>\n    <SetToolTipTitle artifactSheet={artifactSheet} numInSet={numInSet} />\n  </Suspense>\n}\nfunction SetToolTipTitle({ artifactSheet, numInSet = 5 }: { artifactSheet: ArtifactSheet, numInSet?: number }) {\n  const { t } = useTranslation(\"sheet\")\n  return <Stack spacing={2} sx={{ p: 1 }}>\n    {Object.keys(artifactSheet.setEffects).map((setKey) => <Box key={setKey} sx={{ opacity: parseInt(setKey) <= numInSet ? 1 : 0.5 }}>\n      <Typography><SqBadge color=\"success\">{t(`${setKey}set`)}</SqBadge></Typography>\n      <Typography><Translate ns={`artifact_${artifactSheet.key}_gen`} key18={`setEffects.${setKey}`} /></Typography>\n    </Box>\n    )}\n  </Stack>\n}\n","import { Box, Grid, ToggleButton } from \"@mui/material\"\nimport KeyMap from \"../../KeyMap\"\nimport { allSubstatKeys } from \"../../Types/artifact\"\nimport SolidToggleButtonGroup from \"../SolidToggleButtonGroup\"\nimport StatIcon from \"../StatIcon\"\n\nexport default function SubstatToggle({ selectedKeys, onChange }) {\n  const keys1 = allSubstatKeys.slice(0, 6)\n  const keys2 = allSubstatKeys.slice(6)\n  const selKeys1 = selectedKeys.filter(k => keys1.includes(k))\n  const selKeys2 = selectedKeys.filter(k => keys2.includes(k))\n  return <Grid container spacing={1}>\n    <Grid item xs={12} md={6}>\n      <SolidToggleButtonGroup fullWidth value={selKeys1} onChange={(e, arr) => onChange([...selKeys2, ...arr])} sx={{ height: \"100%\" }}>\n        {keys1.map(key => <ToggleButton size=\"small\" key={key} value={key}>\n          <Box display=\"flex\" gap={1} alignItems=\"center\">\n            {StatIcon[key]}\n            {KeyMap.getArtStr(key)}\n          </Box>\n        </ToggleButton>)}\n      </SolidToggleButtonGroup>\n    </Grid>\n    <Grid item xs={12} md={6}>\n      <SolidToggleButtonGroup fullWidth value={selKeys2} onChange={(e, arr) => onChange([...selKeys1, ...arr])} sx={{ height: \"100%\" }}>\n        {keys2.map(key => <ToggleButton size=\"small\" key={key} value={key}>\n          <Box display=\"flex\" gap={1} alignItems=\"center\">\n            {StatIcon[key]}\n            {KeyMap.getArtStr(key)}\n          </Box>\n        </ToggleButton>)}\n      </SolidToggleButtonGroup>\n    </Grid>\n  </Grid>\n}\n","import { BusinessCenter } from \"@mui/icons-material\"\nimport { Skeleton } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\"\nimport { initCharMeta } from \"../../Database/Data/StateData\"\nimport { DatabaseContext } from \"../../Database/Database\"\nimport useGender from \"../../ReactHooks/useGender\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { charKeyToCharName, charKeyToLocCharKey, LocationCharacterKey, LocationKey, travelerKeys } from \"../../Types/consts\"\nimport GeneralAutocomplete, { GeneralAutocompleteOption } from \"../GeneralAutocomplete\"\nimport ThumbSide from \"./ThumbSide\"\n\nexport function LocationAutocomplete({ location, setLocation, filter = () => true }: { location: LocationKey, setLocation: (v: LocationKey) => void, filter?: (v: CharacterSheet) => void }) {\n  const { t } = useTranslation([\"ui\", \"artifact\", \"charNames_gen\"])\n  const { database } = useContext(DatabaseContext)\n  const gender = useGender(database)\n  const characterSheets = usePromise(() => CharacterSheet.getAll, [])\n  const toText = useCallback((key: LocationCharacterKey): string => t(`charNames_gen:${charKeyToCharName(database.chars.LocationToCharacterKey(key), gender)}`), [database, gender, t])\n  const toImg = useCallback((key: LocationKey) => key === \"\" ? <BusinessCenter /> : characterSheets ? <ThumbSide src={characterSheets(database.chars.LocationToCharacterKey(key), gender)?.thumbImgSide} sx={{ pr: 1 }} /> : <></>, [database, gender, characterSheets])\n  const isFavorite = useCallback((key: LocationCharacterKey) => key === \"Traveler\" ?\n    travelerKeys.some(key => database.states.getWithInit(`charMeta_${key}`, initCharMeta).favorite) :\n    key ? database.states.getWithInit(`charMeta_${key}`, initCharMeta).favorite : false, [database])\n\n  const values: GeneralAutocompleteOption<LocationKey>[] = useMemo(() => [{\n    key: \"\",\n    label: t`artifact:filterLocation.inventory`,\n  },\n  ...Array.from(new Set(database.chars.keys.filter(k => characterSheets?.(k, gender) ? filter(characterSheets(k, gender)!) : true).map(k => charKeyToLocCharKey(k))))\n    .map(v => ({ key: v, label: toText(v), favorite: isFavorite(v) }))\n    .sort((a, b) => {\n      if (a.favorite && !b.favorite) return -1\n      if (!a.favorite && b.favorite) return 1\n      return a.label.localeCompare(b.label)\n    })\n  ], [t, toText, isFavorite, database, characterSheets, filter, gender])\n  return <Suspense fallback={<Skeleton variant=\"text\" width={100} />}><GeneralAutocomplete size=\"small\" options={values} valueKey={location} onChange={setLocation} toImg={toImg} clearKey=\"\" /></Suspense>\n}\n","import { BusinessCenter } from \"@mui/icons-material\";\nimport { Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport useGender from \"../../ReactHooks/useGender\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { LocationKey } from \"../../Types/consts\";\n\nexport default function LocationName({ location }: { location: LocationKey }) {\n  const { t } = useTranslation(\"ui\");\n  const { database } = useContext(DatabaseContext)\n  const gender = useGender(database)\n  const characterSheet = usePromise(() => CharacterSheet.get((location && database) ? database.chars.LocationToCharacterKey(location) : \"\", gender), [location, gender, database])\n  return <Typography component=\"span\">\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t<string>(\"inventory\")}</span>}\n  </Typography>\n\n}\n","import { styled } from \"@mui/system\";\n\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\n  display: \"inline-block\",\n  width: \"auto\",\n  height: `2.3em`,\n  lineHeight: 1,\n  verticalAlign: \"text-bottom\",\n  marginTop: theme.spacing(-3),\n  marginLeft: theme.spacing(-1.25),\n  marginRight: theme.spacing(-1),\n  marginBottom: theme.spacing(-1),\n}))\n\nexport default ThumbSide","import { Favorite } from \"@mui/icons-material\"\nimport { Autocomplete, AutocompleteProps, ListItemIcon, ListItemText, MenuItem, Skeleton } from \"@mui/material\"\nimport { Suspense } from \"react\"\nimport SolidColoredTextField from \"./SolidColoredTextfield\"\n\nexport type GeneralAutocompleteOption<T extends string> = { key: T, label: string, favorite?: boolean }\nexport default function GeneralAutocomplete<T extends string>({ options, valueKey: key, label, onChange, disable = () => false, clearKey, toImg }:\n  { valueKey: T, label?: string, onChange: (v: T) => void, toImg: (v: T) => JSX.Element, disable?: (v: T) => boolean, clearKey?: T } & Omit<AutocompleteProps<GeneralAutocompleteOption<T>, false, true, false>, \"renderInput\" | \"onChange\">) {\n  const value = options.find(o => o.key === key)\n  return <Autocomplete\n    options={options}\n    value={value}\n    clearIcon={key !== clearKey ? undefined : null}\n    onChange={(event, newValue, reason) => {\n      if (reason === \"clear\" && clearKey !== undefined) return onChange(clearKey)\n      return newValue !== null && onChange(newValue.key)\n    }}\n    isOptionEqualToValue={(option, value) => option.key === value.key}\n    getOptionDisabled={option => disable(option.key)}\n    renderInput={props => <SolidColoredTextField\n      {...props}\n      label={label}\n      startAdornment={value !== undefined ? toImg(value.key) : undefined}\n      hasValue={!!value?.key}\n    />}\n    renderOption={(props, option) => <MenuItem value={option.key} {...props}>\n      <ListItemIcon>{toImg(option.key)}</ListItemIcon>\n      <ListItemText>\n        <Suspense fallback={<Skeleton variant=\"text\" width={100} />}>\n          {option.key === value?.key ? <strong>{option.label}</strong> : option.label}\n        </Suspense>\n      </ListItemText>\n      {!!option.favorite && <Favorite />}\n    </MenuItem>\n    }\n  />\n}\n","\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, TooltipProps } from \"@mui/material\";\nimport BootstrapTooltip from \"./BootstrapTooltip\";\n\ninterface ITooltipProps extends Omit<TooltipProps, \"children\"> {\n  className?: string,\n}\nconst InfoTooltip = ({ className, ...props }: ITooltipProps) =>\n  <BootstrapTooltip placement=\"top\" {...props} className={className}>\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faInfoCircle} /></Box>\n  </BootstrapTooltip>\n\nexport default InfoTooltip\n","import SqBadge from './SqBadge';\nimport { clamp } from '../Util/Util';\nimport { ButtonProps } from '@mui/material';\nimport { RollColorKey } from '../Types/consts';\n\nexport default function PercentBadge({ value, max = 1, valid }: {\n  valid?: boolean,\n  value: number | string,\n  max?: number\n}) {\n  let [badgeColor, text]: [color: ButtonProps['color'], text: string] = typeof value === 'number' ?\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}` as RollColorKey, value.toFixed() + \"%\"] : [\"secondary\", value]\n  if (value > max) valid = false\n  if (!valid) badgeColor = \"error\"\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\n}\n","import { TextField, TextFieldProps, useTheme } from \"@mui/material\";\n\ntype SolidColoredTextFieldProps = Omit<TextFieldProps, \"multiline\" | \"variant\" | \"color\" | \"hiddenLabel\" | \"type\" | \"InputLabelProps\"> & {\n  hasValue: boolean\n  startAdornment?: Displayable\n}\nexport default function SolidColoredTextField({ hasValue, startAdornment, InputProps, sx, ...props }: SolidColoredTextFieldProps) {\n  const theme = useTheme()\n  return <TextField\n    {...props}\n    variant=\"filled\"\n    color={hasValue ? \"success\" : \"primary\"}\n    hiddenLabel={props.label ? false : true}\n    type=\"search\"\n    InputProps={{\n      ...InputProps,\n      startAdornment,\n    }}\n    InputLabelProps={{ style: { color: theme.palette.text.primary } }}\n    sx={{\n      ...sx,\n      // Fill in the background without using the `focused` prop\n      \"& .MuiFilledInput-root\": { backgroundColor: hasValue ? theme.palette.success.main : theme.palette.primary.main, paddingTop: props.label ? undefined : 0, paddingBottom: 0, flexWrap: \"nowrap\", },\n      \"& .MuiFilledInput-root.Mui-focused\": { backgroundColor: hasValue ? theme.palette.success.light : theme.palette.primary.light },\n      \"& .MuiFilledInput-root:hover\": { backgroundColor: hasValue ? theme.palette.success.dark : theme.palette.primary.dark },\n      // Remove the colored bar at the bottom of the input\n      \"& .MuiFilledInput-root:before\": { border: \"none\" },\n      \"& .MuiFilledInput-root.Mui-disabled:before\": { border: \"none\" },\n      \"& .MuiFilledInput-root:after\": { border: \"none\" },\n      \"& .MuiFilledInput-root:hover:not(.Mui-disabled):before\": { border: \"none\" },\n      // Remove the x at the end of search input for IE\n      \"& input[type=search]::-ms-clear\": { display: \"none\", width: 0, height: 0 },\n      \"& input[type=search]::-ms-reveal\": { display: \"none\", width: 0, height: 0 },\n      // Remove the x at the end of search input for Chrome\n      \"& input[type=search]::-webkit-search-decoration\": { display: \"none\" },\n      \"& input[type=search]::-webkit-search-cancel-button\": { display: \"none\" },\n      \"& input[type=search]::-webkit-search-results-button\": { display: \"none\" },\n      \"& input[type=search]::-webkit-search-results-decoration\": { display: \"none\" },\n    }}\n  />\n}\n","import { faBan, faChartLine, faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Lock, LockOpen } from '@mui/icons-material';\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, Chip, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\nimport { lazy, Suspense, useCallback, useContext, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ArtifactSetTooltipContent } from '../Components/Artifact/ArtifactSetTooltip';\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\nimport CardLight from '../Components/Card/CardLight';\nimport { LocationAutocomplete } from '../Components/Character/LocationAutocomplete';\nimport LocationName from '../Components/Character/LocationName';\nimport ColorText from '../Components/ColoredText';\nimport ConditionalWrapper from '../Components/ConditionalWrapper';\nimport InfoTooltip from '../Components/InfoTooltip';\nimport PercentBadge from '../Components/PercentBadge';\nimport { StarsDisplay } from '../Components/StarDisplay';\nimport StatIcon from '../Components/StatIcon';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../Database/Database';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport useArtifact from '../ReactHooks/useArtifact';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstatKeys, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\nimport { allElementsWithPhy, LocationKey, Rarity } from '../Types/consts';\nimport { clamp, clamp01 } from '../Util/Util';\n\nconst ArtifactEditor = lazy(() => import('./ArtifactEditor'))\n\ntype Data = {\n  artifactId?: string,\n  artifactObj?: ICachedArtifact,\n  onClick?: (id: string) => void,\n  onDelete?: (id: string) => void,\n  mainStatAssumptionLevel?: number,\n  effFilter?: Set<SubstatKey>,\n  editor?: boolean,\n  canExclude?: boolean\n  canEquip?: boolean,\n  extraButtons?: JSX.Element\n}\nconst allSubstatFilter = new Set(allSubstatKeys)\n\nexport default function ArtifactCard({ artifactId, artifactObj, onClick, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, editor = false, canExclude = false, canEquip = false, extraButtons }: Data): JSX.Element | null {\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  const { database } = useContext(DatabaseContext)\n  const databaseArtifact = useArtifact(artifactId)\n  const sheet = usePromise(() => ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\n  const setLocation = useCallback((k: LocationKey) => artifactId && database.arts.set(artifactId, { location: k }), [database, artifactId])\n\n  const editable = !artifactObj\n  const [showEditor, setshowEditor] = useState(false)\n  const onHideEditor = useCallback(() => setshowEditor(false), [setshowEditor])\n  const onShowEditor = useCallback(() => editable && setshowEditor(true), [editable, setshowEditor])\n\n  const wrapperFunc = useCallback(children => <CardActionArea onClick={() => artifactId && onClick?.(artifactId)} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</CardActionArea>, [onClick, artifactId],)\n  const falseWrapperFunc = useCallback(children => <Box sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</Box>, [])\n\n  const art = artifactObj ?? databaseArtifact\n\n  const { currentEfficiency, maxEfficiency, currentEfficiency_, maxEfficiency_ } = useMemo(() => {\n    if (!art) return { currentEfficiency: 0, maxEfficiency: 0, currentEfficiency_: 0, maxEfficiency_: 0 }\n    const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\n    const { currentEfficiency: currentEfficiency_, maxEfficiency: maxEfficiency_ } = Artifact.getArtifactEfficiency(art, new Set(allSubstatKeys))\n    return { currentEfficiency, maxEfficiency, currentEfficiency_, maxEfficiency_ }\n  }, [art, effFilter])\n\n\n  if (!art) return null\n\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const mainStatUnit = KeyMap.unit(mainStatKey)\n\n  const artifactValid = maxEfficiency !== 0\n  const slotName = sheet?.getSlotName(slotKey)\n  const slotDesc = sheet?.getSlotDesc(slotKey)\n  const slotDescTooltip = slotDesc && <InfoTooltip title={<Box>\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}><Typography variant='h6'>{slotName}</Typography></Suspense>\n    <Typography>{slotDesc}</Typography>\n  </Box>} />\n  const ele = allElementsWithPhy.find(e => mainStatKey.startsWith(e))\n  const mainIcon = ele ? <ColorText color={ele}>{StatIcon[mainStatKey]}</ColorText> : StatIcon[mainStatKey]\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\n    {editor && <Suspense fallback={false}>\n      <ArtifactEditor\n        artifactIdToEdit={showEditor ? artifactId : \"\"}\n        cancelEdit={onHideEditor}\n      />\n    </Suspense>}\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <ConditionalWrapper condition={!!onClick} wrapper={wrapperFunc} falseWrapper={falseWrapperFunc}>\n        <Box className={`grad-${rarity}star`} sx={{ position: \"relative\", width: \"100%\" }}>\n          {!onClick && <IconButton color=\"primary\" disabled={!editable} onClick={() => database.arts.set(id, { lock: !lock })} sx={{ position: \"absolute\", right: 0, bottom: 0, zIndex: 2 }}>\n            {lock ? <Lock /> : <LockOpen />}\n          </IconButton>}\n          <Box sx={{ pt: 2, px: 2, position: \"relative\", zIndex: 1 }}>\n            {/* header */}\n            <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1, mb: 1 }}>\n              <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={Artifact.levelVariant(level)} />\n              {!slotName && <Skeleton variant=\"text\" width={100} />}\n              {slotName && <Typography noWrap sx={{ textAlign: \"center\", backgroundColor: \"rgba(100,100,100,0.35)\", borderRadius: \"1em\", px: 1 }}><strong>{slotName}</strong></Typography>}\n              {!slotDescTooltip && <Skeleton width={10} />}\n              {slotDescTooltip}\n            </Box>\n            <Typography color=\"text.secondary\" variant=\"body2\">\n              <SlotNameWithIcon slotKey={slotKey} />\n            </Typography>\n            <Typography variant=\"h6\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\n              {mainIcon}\n              <span>{KeyMap.get(mainStatKey)}</span>\n            </Typography>\n            <Typography variant=\"h5\">\n              <strong>\n                <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\n              </strong>\n            </Typography>\n            <StarsDisplay stars={rarity} colored />\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\n          </Box>\n          <Box sx={{ height: \"100%\", position: \"absolute\", right: 0, top: 0 }}>\n            <Box\n              component=\"img\"\n              src={sheet?.slotIcons[slotKey] ?? \"\"}\n              width=\"auto\"\n              height=\"100%\"\n              sx={{ float: \"right\" }}\n            />\n          </Box>\n        </Box>\n        <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0, width: \"100%\" }}>\n          {substats.map((stat: ICachedSubstat) => !!stat.value && <SubstatDisplay key={stat.key} stat={stat} effFilter={effFilter} rarity={rarity} />)}\n          <Typography variant=\"caption\" sx={{ display: \"flex\", gap: 1, my: 1 }}>\n            <ColorText color=\"secondary\" sx={{ flexGrow: 1 }}>{t`artifact:editor.curSubEff`}</ColorText>\n            <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\n            {currentEfficiency !== currentEfficiency_ && <span>/</span>}\n            {currentEfficiency !== currentEfficiency_ && <PercentBadge value={currentEfficiency_} max={900} valid={artifactValid} />}\n          </Typography>\n          {currentEfficiency !== maxEfficiency && <Typography variant=\"caption\" sx={{ display: \"flex\", gap: 1 }}>\n            <ColorText color=\"secondary\" sx={{ flexGrow: 1 }}>{t`artifact:editor.maxSubEff`}</ColorText>\n            <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\n            {maxEfficiency !== maxEfficiency_ && <span>/</span>}\n            {maxEfficiency !== maxEfficiency_ && <PercentBadge value={maxEfficiency_} max={900} valid={artifactValid} />}\n          </Typography>}\n          <Box flexGrow={1} />\n          {art.probability !== undefined && art.probability >= 0 && <strong>Probability: {(art.probability * 100).toFixed(2)}%</strong>}\n          <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {sheet && <InfoTooltip title={<ArtifactSetTooltipContent artifactSheet={sheet} />} />}</Typography>\n        </CardContent>\n      </ConditionalWrapper>\n      <Box sx={{ p: 1, display: \"flex\", gap: 1, justifyContent: \"space-between\", alignItems: \"center\" }}>\n        <Box sx={{ flexGrow: 1 }}>\n          {editable && canEquip\n            ? <LocationAutocomplete location={location} setLocation={setLocation} />\n            : <LocationName location={location} />}\n        </Box>\n        {editable && <ButtonGroup sx={{ height: \"100%\" }}>\n          {editor && <Tooltip title={<Typography>{t`artifact:edit`}</Typography>} placement=\"top\" arrow>\n            <Button color=\"info\" size=\"small\" onClick={onShowEditor} >\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n            </Button>\n          </Tooltip>}\n          {canExclude && <Tooltip title={<Box>\n            <Typography>{t`artifact:excludeArtifactTip`}</Typography>\n            <Typography><ColorText color={exclude ? \"error\" : \"success\"}>{t(`artifact:${exclude ? \"excluded\" : \"included\"}`)}</ColorText></Typography>\n          </Box>} placement=\"top\" arrow>\n            <Button onClick={() => database.arts.set(id, { exclude: !exclude })} color={exclude ? \"error\" : \"success\"} size=\"small\" >\n              <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\n            </Button>\n          </Tooltip>}\n          {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\n            <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n          </Button>}\n          {extraButtons}\n        </ButtonGroup>}\n      </Box>\n    </CardLight >\n  </Suspense>\n}\nfunction SubstatDisplay({ stat, effFilter, rarity }: { stat: ICachedSubstat, effFilter: Set<SubstatKey>, rarity: Rarity }) {\n  const numRolls = stat.rolls?.length ?? 0\n  const maxRoll = stat.key ? Artifact.substatValue(stat.key) : 0\n  const rollData = useMemo(() => stat.key ? Artifact.getSubstatRollData(stat.key, rarity) : [], [stat.key, rarity])\n  const rollOffset = 7 - rollData.length\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\n  const efficiency = stat.efficiency ?? 0\n  const inFilter = stat.key && effFilter.has(stat.key)\n  const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\n  const statName = KeyMap.getStr(stat.key)\n  const unit = KeyMap.unit(stat.key)\n  const progresses = useMemo(() => <Box display=\"flex\" gap={0.25} height=\"1.3em\" sx={{ opacity: inFilter ? 1 : 0.3 }}>\n    {[...stat.rolls].sort().map((v, i) => <SmolProgress key={`${i}${v}`} value={100 * v / maxRoll} color={`roll${clamp(rollOffset + rollData.indexOf(v), 1, 6)}.main`} />)}\n  </Box>, [inFilter, stat.rolls, maxRoll, rollData, rollOffset])\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\n    <Typography sx={{ flexGrow: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{StatIcon[stat.key]} {statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</Typography>\n    {progresses}\n    <Typography sx={{ opacity: effOpacity, minWidth: 40, textAlign: \"right\" }}>{efficiency.toFixed()}%</Typography>\n  </Box>)\n}\nexport function SmolProgress({ color = \"red\", value = 50 }) {\n  return <Box sx={{ width: 7, height: \"100%\", bgcolor: color, overflow: \"hidden\", borderRadius: 1, display: \"inline-block\" }}>\n    <Box sx={{ width: 10, height: `${100 - clamp(value, 0, 100)}%`, bgcolor: \"gray\" }} />\n  </Box>\n}\n","import Artifact from \"../Data/Artifacts/Artifact\";\nimport { allSubstatKeys, ICachedArtifact, MainStatKey, SubstatKey } from \"../Types/artifact\";\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, LocationKey, SlotKey } from \"../Types/consts\";\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\nimport { probability } from \"./RollProbability\";\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\n\nexport type FilterLocationKey = LocationKey | \"Equipped\" | \"Inventory\"\n\nexport type FilterOption = {\n  artSetKeys: ArtifactSetKey[],\n  rarity: ArtifactRarity[],\n  levelLow: number,\n  levelHigh: number,\n  slotKeys: SlotKey[],\n  mainStatKeys: MainStatKey[],\n  substats: SubstatKey[]\n  location: FilterLocationKey\n  exclusion: Array<\"excluded\" | \"included\">,\n  locked: Array<\"locked\" | \"unlocked\">,\n  rvLow: number,\n  rvHigh: number,\n  lines: Array<1 | 2 | 3 | 4>\n}\n\ntype ArtifactSortFilter = {\n  filterOption: FilterOption\n  ascending: boolean\n  sortType: ArtifactSortKey\n}\nexport function initialFilterOption(): FilterOption {\n  return {\n    artSetKeys: [],\n    rarity: [...allArtifactRarities],\n    levelLow: 0,\n    levelHigh: 20,\n    slotKeys: [...allSlotKeys],\n    mainStatKeys: [],\n    substats: [],\n    location: \"\",\n    exclusion: [\"excluded\", \"included\"],\n    locked: [\"locked\", \"unlocked\"],\n    rvLow: 0,\n    rvHigh: 900,\n    lines: [1, 2, 3, 4]\n  }\n}\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\n  filterOption: initialFilterOption(),\n  ascending: false,\n  sortType: artifactSortKeys[0],\n})\n\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\n  return {\n    rarity: art => art.rarity ?? 0,\n    level: art => art.level ?? 0,\n    artsetkey: art => art.setKey ?? \"\",\n    efficiency: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency,\n    mefficiency: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency,\n    probability: art => {\n      if (!Object.keys(probabilityFilter).length) return 0\n      const prob = (art as any).probability\n      if (prob === undefined) return probability(art, probabilityFilter);\n      return prob\n    }\n  }\n}\nexport function artifactFilterConfigs(effFilterSet: Set<SubstatKey> = new Set(allSubstatKeys)): FilterConfigs<keyof FilterOption, ICachedArtifact> {\n  return {\n    exclusion: (art, filter) => {\n      if (!filter.includes(\"included\") && !art.exclude) return false\n      if (!filter.includes(\"excluded\") && art.exclude) return false\n      return true\n    },\n    locked: (art, filter) => {\n      if (!filter.includes(\"locked\") && art.lock) return false\n      if (!filter.includes(\"unlocked\") && !art.lock) return false\n      return true\n    },\n    location: (art, filter) => {\n      if (!filter) return true\n      if (filter === \"Inventory\" && !art.location) return true\n      if (filter === \"Equipped\" && art.location) return true\n      if (filter === art.location) return true\n      return false\n    },\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\n    slotKeys: (art, filter) => filter.includes(art.slotKey),\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\n    levelLow: (art, filter) => filter <= art.level,\n    levelHigh: (art, filter) => filter >= art.level,\n    // When RV is set to 0/900, allow all, just incase someone is doing some teehee haha with negative substats or stupid rolls\n    rvLow: (art, filter) => filter === 0 ? true : filter <= Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency,\n    rvHigh: (art, filter) => filter === 900 ? true : filter >= Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency,\n    rarity: (art, filter) => filter.includes(art.rarity),\n    substats: (art, filter) => {\n      for (const filterKey of filter)\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\n      return true\n    },\n    lines: (art, filter) => filter.includes(art.substats.filter(s => s.value).length),\n  }\n}\nexport const artifactSortMap: Partial<Record<ArtifactSortKey, ArtifactSortKey[]>> = {\n  level: [\"level\", \"rarity\", \"artsetkey\"],\n  rarity: [\"rarity\", \"level\", \"artsetkey\"],\n  artsetkey: [\"artsetkey\", \"rarity\", \"level\"],\n  efficiency: [\"efficiency\"],\n  mefficiency: [\"mefficiency\"],\n  probability: [\"probability\"],\n}\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\nimport { crawlObject, layeredAssignment } from '../Util/Util'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\n\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\n// probability distribution and require separate consideration.\n\n// Notations for the remainder of this file.\n//\n// i, j, k := substat\n// E(i) := Extra substat that rolls into substat i\n// T(i) := Targetted (extra) substat for substat i\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\n// Nu(i) := # of upgrade rolls into substat i\n//\n// E := { E1, E2, ... }\n// T := { T1, T2, ... }\n// N(i) := Nf(i) + Nu(i)\n// Nf := Nf(1) + Nf(2) + ...\n// Nu := Nu(1) + Nu(2) + ...\n//\n// For example, if the artifact has 14 atk, and the target atk is 30,\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\n//\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\n\nconst allWeights = [3, 4, 6] as const\ntype Weight = typeof allWeights[number]\n\n/**\n * Weight used when rolling a filler roll. Each roll will choose from available\n * substats (excluding main stat and existing substats) with these weights.\n */\nconst fWeight: StrictDict<SubstatKey, Weight> = {\n  hp: 6, atk: 6, def: 6,\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\n  critRate_: 3, critDMG_: 3\n}\n\n/**\n * Probability of observing a filler sequence with particular weights\n *\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\n */\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\n  if (prefix.length === 5) {\n    layeredAssignment(pFillerSeq, prefix as any, current)\n    return\n  }\n\n  for (const i of allWeights)\n    if (prob[i] > 0)\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\n}\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\n\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\n\n/**\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\n *\n * 0 <= n <= 5; 0 <= r <= n\n */\nconst cnr = Array(6).fill(0).map((_, n) => {\n  const result = [1]\n  let r = 0, value = 1\n  while (++r <= n) {\n    value *= n - r + 1\n    value /= r\n    result.push(value)\n  }\n\n  return result\n})\n\n/**\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\n *\n * 0 <= n <= 5; 0 <= i < 3*n + 1\n */\nconst pNExtra = [[1]]\nwhile (pNExtra.length < 6) {\n  const last = pNExtra[pNExtra.length - 1]\n  const next = Array(last.length + 3).fill(0)\n  last.forEach((value, i) => {\n    for (const j of [0, 1, 2, 3]) {\n      next[i + j] += value\n    }\n  })\n\n  pNExtra.push(next.map(x => x / 4))\n}\nfor (const array of pNExtra) {\n  let accu = array.reduce((a, b) => a + b)\n  array.forEach((x, i, array) => {\n    array[i] = accu\n    accu -= x\n  })\n}\n\n/** Probability that `artifact` will have at least `target` stats at max level */\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\n\n  const { rarity, level, substats } = artifact\n\n  // `target = target - mainstat - substat` to find the extra substats we need\n  // Also count filler rolls (4 - # of substats) while we're at it\n  const target = { ..._target }, required = new Set(Object.keys(target))\n  let numFillerSlots = 0\n  {\n    const key = artifact.mainStatKey\n    if (key in target) {\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\n\n      delete target[key]\n      required.delete(key as SubstatKey)\n    }\n  }\n  for (const { key, value } of substats) {\n    if (key) {\n      if (required.has(key)) {\n        required.delete(key)\n        if (target[key]! > value)\n          target[key]! -= value\n        else delete target[key] // Requirement already met\n      }\n    } else numFillerSlots += 1\n  }\n  numFillerSlots += 4 - substats.length\n\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\n\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\n\n  // normalize `target`\n  for (const [key, value] of Object.entries(target))\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.substatValue(key, rarity)), 1)\n\n  let minTotalUpgrades = 0\n  const targetEntries = Object.entries(target).map(([key, target]) => {\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\n    minTotalUpgrades += minUpgrade\n    return { target, filler, minUpgrade }\n  }).reverse()\n\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\n\n  /**\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\n   *\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\n   *\n   * Then\n   *\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\n   *\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\n   *\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\n   *  g(0, N) = 1\n   *  g(0, n) = 0 for n != N\n   *\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\n   */\n\n  // At this point,\n  //  `target` = ceil(T / alpha)\n  //  `numUpgradeRolls` = Nu\n\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\n\n  // Keep applying `target` from first to last.\n  // At each step i in the loop, `result[n]` = g(i, n)\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\n    const next: typeof result = {}\n\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\n      // rolls = m; extra = T(i) / alpha - 7n\n\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\n      const extra = target - 7 * (rolls + filler)\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\n      //        = f(m + Nf(i), T(i))\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\n\n      for (const [_remaining, probability] of Object.entries(result)) {\n        const remaining = parseInt(_remaining)\n        if (remaining < rolls) continue\n\n        // n := remaining - m\n        // remaining = n + m\n        // probability = g(i, n + m)\n\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\n        //          = h(n + m, m, |K| - i)\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\n        const index = remaining - rolls // n\n\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\n      }\n    }\n    result = next\n  })\n\n  // At this point, `result[i]` = g(|K|, i)\n\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\n}\n\n/**\n * Pr[ N(k) = n | N = m, |K| = M ]\n *\n * 0 <= n <= N <= 5; 0 <= M <= 4\n */\nfunction pRollInto(m: number, n: number, M: number) {\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\n}\n\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\n\n  const mainStatRatio = fWeight[mainStat] ?? 0\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\n\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\n  for (const { key } of substats) {\n    if (key) {\n      const ratio = fWeight[key]\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\n      numUnusedSubstats[ratio] -= 1\n    }\n  }\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\n\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\n  for (const key of required) requiredCount[fWeight[key]] += 1\n\n  let total = 0\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\n    total += prob\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\n    for (const key of path) currentCount[key] += 1\n\n    let sum = prob\n    for (const i of allWeights) {\n      const current = currentCount[i], required = requiredCount[i]\n      if (current < required) return\n      sum *= cnr[current][required]\n    }\n\n    pFillerRolls += sum\n  })\n\n  for (const i of allWeights)\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\n  return pFillerRolls / total\n}\n\nexport { probability }\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useArtifact(artifactID: string | undefined = \"\") {\n  const { database } = useContext(DatabaseContext)\n  const [artifact, setArtifact] = useState(database.arts.get(artifactID))\n  useEffect(() => setArtifact(database.arts.get(artifactID)), [database, artifactID])\n  useEffect(() =>\n    artifactID ? database.arts.follow(artifactID, (k, r, v) => r === \"update\" && setArtifact(v)) : undefined,\n    [artifactID, setArtifact, database])\n  return artifact\n}\n"],"names":["ArtifactSetTooltip","children","artifactSheet","numInSet","placement","title","ArtifactSetTooltipContent","disableInteractive","Suspense","fallback","variant","width","height","SetToolTipTitle","t","useTranslation","spacing","sx","p","Object","keys","setEffects","map","setKey","opacity","parseInt","color","ns","key","key18","SubstatToggle","selectedKeys","onChange","keys1","allSubstatKeys","keys2","selKeys1","filter","k","includes","selKeys2","container","item","xs","md","fullWidth","value","e","arr","size","display","gap","alignItems","StatIcon","KeyMap","LocationAutocomplete","location","setLocation","database","useContext","DatabaseContext","gender","useGender","characterSheets","usePromise","CharacterSheet","toText","useCallback","charKeyToCharName","chars","LocationToCharacterKey","toImg","src","thumbImgSide","pr","isFavorite","travelerKeys","states","getWithInit","initCharMeta","favorite","values","useMemo","label","Array","from","Set","charKeyToLocCharKey","v","sort","a","b","localeCompare","options","valueKey","clearKey","LocationName","characterSheet","component","name","nameWIthIcon","verticalAlign","ThumbSide","styled","theme","lineHeight","marginTop","marginLeft","marginRight","marginBottom","GeneralAutocomplete","disable","find","o","clearIcon","undefined","event","newValue","reason","isOptionEqualToValue","option","getOptionDisabled","renderInput","props","startAdornment","hasValue","renderOption","className","cursor","icon","faInfoCircle","PercentBadge","max","valid","clamp","Math","floor","toFixed","badgeColor","text","SolidColoredTextField","InputProps","useTheme","hiddenLabel","type","InputLabelProps","style","palette","primary","backgroundColor","success","main","paddingTop","paddingBottom","flexWrap","light","dark","border","ArtifactEditor","lazy","allSubstatFilter","ArtifactCard","artifactId","artifactObj","onClick","onDelete","mainStatAssumptionLevel","effFilter","editor","canExclude","canEquip","extraButtons","databaseArtifact","useArtifact","sheet","ArtifactSheet","arts","set","editable","useState","showEditor","setshowEditor","onHideEditor","onShowEditor","wrapperFunc","flexGrow","flexDirection","falseWrapperFunc","art","currentEfficiency","maxEfficiency","currentEfficiency_","maxEfficiency_","Artifact","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","mainStatLevel","min","mainStatUnit","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","ele","allElementsWithPhy","startsWith","mainIcon","minHeight","artifactIdToEdit","cancelEdit","condition","wrapper","falseWrapper","position","disabled","right","bottom","zIndex","pt","px","mb","noWrap","textAlign","borderRadius","cacheValueString","stars","colored","top","slotIcons","float","pb","stat","SubstatDisplay","my","probability","A","justifyContent","arrow","faEdit","faBan","faChartLine","faTrashAlt","numRolls","rolls","length","maxRoll","rollData","rollOffset","rollColor","efficiency","inFilter","has","effOpacity","clamp01","statName","unit","progresses","i","SmolProgress","indexOf","alignContent","minWidth","bgcolor","overflow","artifactSortKeys","initialFilterOption","artSetKeys","allArtifactRarities","levelLow","levelHigh","slotKeys","allSlotKeys","mainStatKeys","exclusion","locked","rvLow","rvHigh","lines","initialArtifactSortFilter","filterOption","ascending","sortType","artifactSortConfigs","effFilterSet","probabilityFilter","artsetkey","mefficiency","prob","artifactFilterConfigs","filterKey","some","substat","s","artifactSortMap","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","sumProb","current","layeredAssignment","cnr","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","artifact","_target","NaN","target","required","numFillerSlots","maxLevel","ArtifactMainStatsData","delete","numUpgradeRolls","entries","ceil","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","artifactID","get","setArtifact","useEffect","follow"],"sourceRoot":""}
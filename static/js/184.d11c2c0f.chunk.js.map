{"version":3,"file":"static/js/184.d11c2c0f.chunk.js","mappings":"gHAqFO,SAASA,EAAaC,EAAyBC,GACpD,GAAKD,GAAQC,EAEb,OADCC,MAAMC,QAAQF,IAASG,QAAQC,MAAMJ,GAC/BA,EAAKK,QAAO,SAACC,EAAGC,GAAJ,cAAUD,QAAV,IAAUA,OAAV,EAAUA,EAAIC,EAAd,GAAkBR,EACtC,CA2BM,SAASS,EAA2CR,EAAoBS,GAC7E,OAAOC,OAAOC,YAAYX,EAAKS,KAAI,SAACF,EAAGK,GAAJ,MAAU,CAACL,EAAGE,EAAIF,EAAGK,GAArB,IACpC,CAQM,SAASC,EAAkCd,EAA4Be,GAC5E,OAAOJ,OAAOC,YAAYD,OAAOK,QAAQhB,GAAKU,KAC5C,WAASG,GAAT,mBAAEL,EAAF,KAAKS,EAAL,WAAe,CAACT,EAAGO,EAAGE,EAAGT,EAAGK,GAA5B,IAEH,CAED,IAAMK,GAAQ,eAAG,SAAXA,EAAsBC,EAAcC,GAAzB,4EACNP,EAAIM,EADE,YACIN,GAAKO,GADT,gBACkB,OADlB,SACwBP,EADxB,OACaA,IADb,mDAAXK,EAAW,IAKV,SAASG,EAAMF,EAAcC,GAClC,OAAO,OAAIF,EAASC,EAAMC,GAC3B,CAEM,SAASE,EAAkBC,GAChC,MAAM,IAAIC,MAAJ,2CAA8CD,GACrD,CCvI4BE,EAASC,IAAK,CAAEC,IAAK,SAC/BC,EAAQ,GAAaA,EAAQ,GAC5BH,EAAS,QAKtB,SAASA,EAASF,EAAoCM,GAC3D,MAAO,CAAEC,UAAW,QAASC,SAAU,GAAIR,MAAAA,EAAOM,KAAAA,EACnD,CAEM,SAASD,EAAQL,EAAeM,GAGrC,OAFIN,GAASS,OAAOC,UAAY,MAAKV,EAAQW,KACzCX,IAAUS,OAAOC,UAAY,MAAKV,GAASW,KACxCT,EAASF,GAAD,QAAUI,IAAK,KAAQE,GACvC,CAkBM,SAASM,IAAgC,IAAD,uBAAxBC,EAAwB,yBAAxBA,EAAwB,gBAC7C,MAAO,CAAEN,UAAW,MAAOC,SAAUM,EAAQD,GAC9C,CAEM,SAASE,IAAgC,IAAD,uBAAxBF,EAAwB,yBAAxBA,EAAwB,gBAC7C,MAAO,CAAEN,UAAW,MAAOC,SAAUM,EAAQD,GAC9C,CA4FM,SAASG,EAAWC,EAAyBX,GAClD,MAAO,CAAEC,UAAW,OAAQC,SAAU,GAAIS,KAAAA,EAAMX,KAAAA,EAAMY,KAAM,SAC7D,CAwBD,SAASJ,EAAQD,GACf,OAAOA,EAAO1B,KAAI,SAAAa,GAAK,MAAqB,kBAAVA,EAAqBA,EAAQE,EAASF,EAAjD,GACxB,CCpKM,SAASmB,EAAaC,EAAiCC,EAAiDC,GAC7G,IAAMC,EAAW,IAAIC,IAA4BC,EAAU,IAAID,IAqB/DJ,EAASM,SAnBT,SAASC,EAASC,GACZH,EAAQI,IAAID,KAEZL,EAASM,IAAID,GACf/C,QAAQC,MAAM,uDAGhByC,EAASO,IAAIF,GAEbP,EAAQO,GAERA,EAAQpB,SAASkB,QAAQC,GAEzBL,EAASM,GAETL,EAASQ,OAAOH,GAChBH,EAAQK,IAAIF,IACb,GAGF,CAGM,SAASI,EAAYZ,EAAiCa,EAAmEC,GAC9H,IAAMX,EAAW,IAAIC,IACfW,EAAgB,IAAIC,IACpBC,EAAiB,IAAID,IAE3B,SAASE,EAAMV,GACb,IAAIP,EAAUc,EAAcI,IAAIX,GAChC,GAAIP,EAAS,OAAOA,EACpBA,EAAUY,EAAWL,GAErB,IAAIN,EAAWe,EAAeE,IAAIlB,GAClC,OAAIC,IAEAC,EAASM,IAAIR,IACfxC,QAAQC,MAAM,oDACPoB,EAASC,OAElBoB,EAASO,IAAIT,GAEbC,EAAWY,EASb,SAAkBN,GAChB,IAAMpB,EAAWoB,EAAQpB,SAASrB,IAAImD,GACtC,OAAOE,EAAWhC,EAAUoB,EAAQpB,UAAYoB,GAAzC,kBAAwDA,GAAxD,IAAiEpB,SAAAA,GACzE,CAZwBmB,CAASN,GAAUO,GAE1CL,EAASQ,OAAOV,GAEhBc,EAAcM,IAAIb,EAASN,GAC3Be,EAAeI,IAAIpB,EAASC,GACrBA,GACR,CAOD,IAAMoB,EAAStB,EAASjC,IAAImD,GAC5B,OAAOE,EAAWE,EAAQtB,GAAYA,EAAWsB,CAClD,CAsDD,SAASF,EAAcxD,EAA6B2D,GAClD,YAAUC,IAAN5D,OAA8B4D,IAAND,OAClBC,IAAND,IAEG3D,EAAE6D,SAAWF,EAAEE,QAAU7D,EAAE8D,OAAM,SAAC9C,EAAOV,GAAR,OAAcU,IAAU2C,EAAErD,EAA1B,IACzC,CCrHD,IAAMyD,EAAkG,CACtGnC,IAAK,SAACoC,GAAD,OAAyBC,KAAKrC,IAAL,MAAAqC,MAAI,OAAQD,GAArC,EACLjC,IAAK,SAACiC,GAAD,OAAyBC,KAAKlC,IAAL,MAAAkC,MAAI,OAAQD,GAArC,EACLlB,IAAK,SAACkB,GAAD,OAAyBA,EAAEjE,QAAO,SAACC,EAAG2D,GAAJ,OAAU3D,EAAI2D,CAAd,GAAiB,EAAnD,EACLO,IAAK,SAACF,GAAD,OAAyBA,EAAEjE,QAAO,SAACC,EAAG2D,GAAJ,OAAU3D,EAAI2D,CAAd,GAAiB,EAAnD,GAEMQ,GAA2E,kBACnFJ,GADmF,IAEtFK,IAAK,YAA8B,IAA5BA,GAA2B,eAChC,OAAIA,EAAM,EAAU,EAAIA,EAAM,EACrBA,GAAO,IAAa,GAAW,EAANA,EAAU,GACrC,EAAIA,CACZ,EACDC,SAAU,SAACL,GAAD,OAAyBA,EAAE,GAAKA,EAAEjE,QAAO,SAACC,EAAG2D,GAAJ,OAAU3D,EAAI2D,CAAd,GAAzC,EACVW,UAAW,+BAAEtD,EAAF,KAASsD,EAAT,KAAoBC,EAApB,KAA0BC,EAA1B,YAAsDxD,GAASsD,EAAYC,EAAOC,CAAlF,IAGPC,EAAgC,IAAIjC,IAAIpC,OAAOV,KAAKqE,IAuD1D,SAASW,EAAQtC,GACf,OAAOY,EAAYZ,GAAU,SAAAuC,GAAC,OAAIA,CAAJ,IAAO,SAAAC,GACnC,IAAIlB,EAASkB,EACb,GAAIH,EAA8B5B,IAAI+B,EAASrD,WAAmB,CAChE,IAAMqB,EAAUgC,EACRrD,EAAcqB,EAAdrB,UAEJsD,GAAY,EACVrD,EAAWoB,EAAQpB,SAASsD,SAAQ,SAAAC,GAAG,OAC1CA,EAAIxD,YAAcA,GAAcsD,GAAY,EAAME,EAAIvD,UAAY,CAACuD,EADzB,IAE7CrB,EAASmB,GAAS,kBAAQjC,GAAR,IAAiBpB,SAAAA,IAAaoB,CACjD,CAED,OAAOc,CACR,GACF,CACD,SAASsB,EAAY5C,GACnB,SAAS6C,EAAiBC,GACxB,IAD6D,EACvDxB,EAAS,IAAIN,IAD0C,UAEzC8B,GAFyC,IAE7D,2BAA2B,OAAhBlE,EAAgB,QAAA0C,EAAOD,IAAIzC,GAAO,UAAC0C,EAAOH,IAAIvC,UAAZ,QAAsB,GAAK,EAAE,CAFb,+BAG7D,OAAO0C,CACR,CAaD,IARA,IAAMyB,EAAO,CACXC,OAAQ,CACNC,OAAQ,IAAIjC,IACZhB,SAAU,IAAII,IACdjB,UAAW,QAdoC,aAwBjD,IALA,IAb0B8D,EAatBC,OAAoC,EAElCC,EAAwB,CAAEhE,UAAW4D,EAAKC,OAAO7D,UAAWC,UAfxC6D,EAekEF,EAAKC,OAAOC,QAdjG,OAAIA,GAAQP,SAAQ,+BAAEC,EAAF,KAAOS,EAAP,YAAkB7F,MAAM6F,GAAOC,KAAKV,EAApC,MAgBvBW,EAAwB,IAAItC,IAChC,MAAwBhD,OAAOV,KAAKqE,GAApC,gBAAK,IAAMxC,EAAS,KAClBmE,EAAsBjC,IAAIlC,EAAW,GADvC,CA2EA,GAxEAa,EAAWY,EAAYZ,GAAU,SAAAwC,GAC/B,GAAIO,EAAKC,OAAOhD,SAASS,IAAI+B,GAAsB,CACjD,IAAMhC,EAAUgC,EACVe,EAAkB,IAAIvC,IAAI+B,EAAKC,OAAOC,QACtC7D,EAAWoB,EAAQpB,SAASoE,QAAO,SAAAb,GACvC,IAAMS,EAAQG,EAAgBpC,IAAIwB,GAClC,OAAIS,IACFG,EAAgBlC,IAAIsB,EAAKS,EAAQ,IAC1B,EAGV,IAED,OAAKhE,EAASqC,QAEdrC,EAASqE,KAAKN,IACP,kBAAK3C,GAAZ,IAAqBpB,SAAAA,KAFZ+D,CAGV,CACD,OAAOX,CACR,IAAE,SAAAA,GACD,IAAKH,EAA8B5B,IAAI+B,EAASrD,WAAmB,OAAOqD,EAC1E,IAAMhC,EAAUgC,EAEhB,GAAIU,GACF,GAAIA,EAAK/D,YAAcqB,EAAQrB,UAAW,CACxC,IADwC,EAClCuE,EAAgBb,EAAcrC,EAAQpB,UAAWuE,EAAe,IAAI3C,IACpE4C,EAAaV,EAAKD,OACpBY,EAAQ,EAH4B,UAKCH,EAAcrF,WALf,IAKxC,2BAAkE,CAAC,IAAD,uBAAtDyF,EAAsD,KAA1CC,EAA0C,KAC1DC,EAAcnC,KAAKrC,IAAIuE,EAAT,UAAuBH,EAAWzC,IAAI2C,UAAtC,QAAqD,GACrEE,GACFL,EAAatC,IAAIyC,EAAYE,GAC7BH,GAASG,GACJL,EAAahD,OAAOmD,EAC5B,CAXuC,+BAYpCD,EAAQ,IACVX,EAAKD,OAASU,EACdT,EAAKlD,SAASU,IAAIF,GAErB,MACI,CACL,IADK,EACCyD,EAAaX,EAAsBnC,IAAIX,EAAQrB,WAC/C8D,EAASJ,EAAcrC,EAAQpB,UAFhC,UAIsC6E,GAJtC,IAIL,2BAAuD,CAAC,IAAD,uBAA3CC,EAA2C,KAAhCC,EAAgC,KACjDN,EAAQ,EAENF,EAAe,IAAI3C,IAH4B,UAIVmD,EAAgB9F,WAJN,IAIrD,2BAAsE,CAAC,IAAD,uBAA1DyF,EAA0D,KAA9CM,EAA8C,KAC9DhB,EAAQvB,KAAKrC,IAAI4E,EAAT,UAAyBnB,EAAO9B,IAAI2C,UAApC,QAAmD,GAC7DV,IACFO,EAAatC,IAAIyC,EAAYV,GAC7BS,GAAST,EAEZ,CAVoD,+BAWrD,GAAIS,EAAQ,EAAG,CACbX,EAAO,CACLD,OAAQU,EACR3D,SAAU,IAAII,IAAI,CAACI,EAAS0D,IAC5B/E,UAAWqB,EAAQrB,WAErBmE,EAAsBe,QACtB,KACD,CACF,CAxBI,+BAyBAnB,GAAMe,EAAWR,KAAK,CAACjD,EAASyC,GACtC,CAED,OAAOzC,CACR,KAEG0C,EACC,cADKH,EAAKC,OAASE,CAnGyB,IAkBtC,kBAkFN,KACN,CAED,OAAOlD,CACR,CAMM,SAASsE,EAAatE,EAAqBuE,GAAyG,IAArFC,EAAoF,uDAAvE,SAAChC,GAAD,OAAqD,CAArD,EAE3EiC,EAAkB,CAAEC,KAAM,GAAIC,UAAW,IAAI3D,KAC7C4D,EAAiB,IAAI5D,IAAI,CAAC,CAACyD,EAAQ,IAAIzD,OAK7C,SAAS6D,EAAKrE,EAA4BsE,GAAsC,IAAD,EACvEC,EAAMD,EAAQH,UAAUxD,IAAIX,GAClC,GAAIuE,EAAK,OAAOA,EAEhB,IACIzD,EADInC,EAAcqB,EAAdrB,UAER,OAAQA,GACN,IAAK,QAAS,OAAOqB,EACrB,IAAK,MAAO,IAAK,MAAO,IAAK,MAAO,IAAK,MACvC,IAAM+B,EAAIR,EAAc5C,GAClB6F,EAA4B,GAC5BC,EAA6BzE,EAAQpB,SAASoE,QAAO,SAAAhD,GACzD,IAAM0E,EAASL,EAAKrE,EAASsE,GAC7B,MAA6B,UAArBI,EAAO/F,YACV6F,EAAgBvB,KAAKyB,EAAOtG,QAAQ,EAE1C,IAAEb,KAAI,SAAA6D,GAAC,OAAIiD,EAAKjD,EAAGkD,EAAZ,IACFK,EAAe5C,EAAEyC,GAcvB,GAAKI,SAASD,IAOP,GAAkB,QAAdhG,GAAwC,IAAjBgG,EAAoB,CACpD7D,EAASxC,EAASqG,GAClB,KACD,OATC,GAAmB,QAAdhG,IACY,QAAdA,GAAuBgG,EAAe,KACxB,QAAdhG,GAAuBgG,EAAe,GAAI,CAC3C7D,EAASxC,EAASqG,GAClB,KACD,CAMCA,IAAiB5C,EAAE,KACrB0C,EAAgBxB,KAAK3E,EAASqG,IACC7D,EAA7B2D,EAAgBxD,QAAU,EAAS,UAAGwD,EAAgB,UAAnB,QAAyBnG,EAASyD,EAAE,KAC7D,CAAEpD,UAAAA,EAAWC,SAAU6F,GACrC,MACF,IAAK,MAAO,IAAK,WACf,IAAM7F,EAAWoB,EAAQpB,SAASrB,KAAI,SAAA6D,GAAC,OAAIiD,EAAKjD,EAAGkD,EAAZ,IACjCvC,EAAIR,EAAc5C,GAEtBmC,EADElC,EAASsC,OAAM,SAAAE,GAAC,MAAoB,UAAhBA,EAAEzC,SAAN,IACTL,EAASyD,EAAEnD,EAASrB,KAAI,SAAA6D,GAAC,OAAKA,EAA2BhD,KAAhC,OACzB,kBAAQ4B,GAAR,IAAiBpB,SAAAA,IAC5B,MAEF,IAAK,SACH,IAAMiG,EAAQR,EAAKrE,EAAQpB,SAAS,GAAI0F,GACxC,GAAwB,UAApBO,EAAMlG,UAAuB,CAAC,IAAD,EACzBmG,EAAQ,UAAG9E,EAAQ+E,MAAMF,EAAMzG,cAAvB,QAAkC4B,EAAQpB,SAAS,GACjE,GAAIkG,EAAU,CACZhE,EAASuD,EAAKS,EAAUR,GACxB,KACD,CACF,CACD,MAAM,IAAIjG,MAAJ,sBAAyBM,EAAzB,wBAER,IAAK,OACH,IAAMqG,EAAQhF,EAAQpB,SAASqG,MAAK,SAAAC,GAClC,IAAMR,EAASL,EAAKa,EAAIZ,GACxB,GAAyB,UAArBI,EAAO/F,UACT,MAAM,IAAIN,MAAJ,sBAAyBM,EAAzB,wBACR,YAAwBqC,IAAjB0D,EAAOtG,KACf,IACD0C,EAASkE,EAAQX,EAAKW,EAAOV,GAAWhG,OAAS0C,GACjD,MAEF,IAAK,QAAU,IAAD,IACRmE,OAAWnE,EADH,UAEUhB,EAAQpB,UAFlB,IAEZ,2BAAwC,CAAC,IAAD,EAChC8F,EAASL,EADuB,QACTC,GAC7B,GAAyB,UAArBI,EAAO/F,UACT,MAAM,IAAIN,MAAJ,sBAAyBM,EAAzB,8BACgBqC,KAAZ,QAAR,EAAAmE,SAAA,eAAU/G,aAAyC4C,IAAjB0D,EAAOtG,OAAuBsG,EAAOtG,MAAQ+G,EAAS/G,SAC1F+G,EAAWT,EACd,CARW,+BASZ5D,EAAM,UAAGqE,SAAH,QAAe7G,OAAS0C,GAC9B,MAEF,IAAK,QACH,MAAiChB,EAAQpB,SAASrB,KAAI,SAAC6D,GAAD,OAA0BiD,EAAKjD,EAAGkD,EAAlC,IAAtD,eAAOc,EAAP,KAAWC,EAAX,KAAeC,EAAf,KAAsBC,EAAtB,KACA,GAAqB,UAAjBH,EAAGzG,WAA0C,UAAjB0G,EAAG1G,UACjC,MAAM,IAAIN,MAAJ,sBAAyBM,EAAzB,wBACRmC,EAAUsE,EAAGhH,QAAUiH,EAAGjH,MAASkH,EAAQC,EAC3C,MAEF,IAAK,YACH,MAAuCvF,EAAQpB,SAASrB,KAAI,SAAA6D,GAAC,OAAIiD,EAAKjD,EAAGkD,EAAZ,IAA7D,eAAOlG,EAAP,KAAcsD,EAAd,KAAyBC,EAAzB,KAA+BC,EAA/B,KAEEd,EADsB,UAApB1C,EAAMO,WAAiD,UAAxB+C,EAAU/C,UAClCP,EAAMA,OAASsD,EAAUtD,MAAQuD,EAAOC,GAE3C,kBAAQ5B,GAAR,IAAiBpB,SAAU,CAACR,EAAOsD,EAAWC,EAAMC,KAC5D,MAEF,IAAK,YACH,MAAgB5B,EAAQpB,SAASrB,KAAI,SAAA6D,GAAC,OAAIiD,EAAKjD,EAAGkD,EAAZ,IAA/BO,GAAP,eACA/D,EAA8B,UAApB+D,EAAMlG,UACZL,EAAS0B,EAAQwF,KAAKX,EAAMzG,SADvB,QAAC,UAED4B,GAFA,IAESpB,SAAU,CAACiG,KAC7B,MAEF,IAAK,OACH,IAAMjG,EAAW0F,EAAQJ,KACtB3G,KAAI,SAAA6D,GAAC,OAAIxE,EAAawE,EAAGpB,EAAQX,KAA5B,IACL2D,QAAO,SAAA5B,GAAC,OAAIA,CAAJ,IAEX,GAAwB,IAApBxC,EAASqC,OACX,GAAI+C,EAAWhE,GAAU,CACvB,IAAQyF,EAASzF,EAATyF,KAEN3E,OADWE,IAATyE,GAA+B,UAATA,EACE,WAAjBzF,EAAQV,KAAoBhB,OAAS0C,GAAa1C,EAASC,KACxDD,EAASiD,EAAckE,GAAM,IAC5C,MAAM3E,EAASd,OAEhBc,OAD0BE,IAAjBhB,EAAQyF,MAA0C,IAApB7G,EAASqC,OACvCoD,EAAKzF,EAASA,EAASqC,OAAS,GAAIqD,GAEpCD,EAAK,CAAE1F,UAAWqB,EAAQyF,KAAM7G,SAAAA,GAAyC0F,GACpF,MAEF,IAAK,OACCtE,EAAQ0F,QAAOpB,EAAUL,GAC7B,IAAM1G,EAAM6G,EAAezD,IAAI2D,GAC3BqB,EAAcpI,EAAIoD,IAAIX,EAAQkE,MAC7ByB,IACHA,EAAc,CAAEzB,KAAK,GAAD,eAAMI,EAAQJ,MAAd,CAAoBlE,EAAQkE,OAAOC,UAAW,IAAI3D,KACtE4D,EAAevD,IAAI8E,EAAa,IAAInF,KACpCjD,EAAIsD,IAAIb,EAAQkE,KAAMyB,IAExB7E,EAASuD,EAAKrE,EAAQpB,SAAS,GAAI+G,GACnC,MACF,QAASxH,EAAkBQ,GAI7B,OADA2F,EAAQH,UAAUtD,IAAIb,EAASc,GACxBA,CACR,CAED,IAAMwD,EAAU,CAAEJ,KAAM,CAACH,GAAeI,UAAW,IAAI3D,KAGvD,OAFA4D,EAAevD,IAAIyD,EAAS,IAAI9D,KAChC4D,EAAezD,IAAIsD,GAASpD,IAAIkD,EAAcO,GACvC9E,EAASjC,KAAI,SAAA6D,GAAC,OAAIiD,EAAKjD,EAAGkD,EAAZ,GACtB,CAEM,ICtWMsB,EAAc,CAAC,SAAU,QAAS,QAAS,SAAU,WAqDrDC,GAnDkB,CAAI,YAAJ,OADJ,CAAC,QAAS,MAAO,UAAW,QAAS,OAAQ,OAAQ,WAoDxC,CACtC,SACA,QACA,UACA,SACA,UACA,WACA,QACA,QACA,SACA,QACA,QACA,OACA,QACA,SACA,OACA,YACA,cACA,OACA,OACA,YACA,SACA,OACA,QACA,UACA,YACA,eACA,QACA,YACA,OACA,UACA,SACA,UACA,SACA,OACA,kBACA,gBACA,OACA,SACA,UACA,OACA,oBACA,QACA,QACA,cACA,UACA,SACA,UACA,gBACA,QACA,kBACA,SACA,OACA,aAwBWC,GAtBqB,UAC7BD,EAD6B,CAEhC,aAoB0B,CAC1B,gBACA,cACA,kBACA,mBAE2B,UACxBA,EACAC,GAG6B,UAC7BD,EAxBwB,CAC3B,iBACA,eACA,mBACA,mBAE2B,CAC3B,iBACA,eACA,mBACA,oBAoLwB,UAjKQ,CAChC,kBACA,gBACA,sBACA,kBACA,YACA,oBACA,gBACA,YACA,gBACA,kBACA,cACA,eACA,oBACA,kBACA,YACA,YACA,uBACA,uBACA,mBACA,iBACA,mBACA,eACA,cACA,gBACA,eACA,eACA,oBACA,gBACA,gBACA,WACA,uBAImC,CACnC,YACA,oBACA,yBACA,aACA,qBACA,gBACA,gBACA,wBACA,cACA,mBACA,cACA,mBACA,cACA,uBACA,kBACA,wBACA,eACA,qBACA,eACA,uBACA,oBACA,UACA,cACA,mBACA,aACA,sBACA,mBAIkC,CAClC,qBACA,iBACA,cACA,kBACA,eACA,aACA,cACA,mBACA,qBACA,gBACA,UACA,YACA,mBACA,cACA,cACA,4BACA,uBACA,aACA,eACA,cACA,WACA,mBACA,kBACA,eAI8B,CAC9B,cACA,UACA,gBACA,mBACA,cACA,iBACA,iBACA,iBACA,WACA,aACA,cACA,cACA,YACA,oBACA,aACA,YACA,WACA,oBACA,WACA,aACA,WACA,OACA,iBACA,qBACA,oBACA,cACA,YACA,gBACA,qBACA,kBACA,eACA,gBAImC,CACnC,mBACA,kBACA,cACA,aACA,sBACA,kBACA,gBACA,cACA,qBACA,eACA,gBACA,6BACA,aA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","sources":["Util/Util.ts","Formula/utils.ts","Formula/internal.ts","Formula/optimization.ts","Types/consts.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/common.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/BackgroundWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/ComputeWorker.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/SplitWorker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export const getRandomElementFromArray = <T>(array: readonly T[]): T => array[Math.floor(Math.random() * array.length)];\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\nexport function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\nexport function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Assumes that the object entries are all primitives + objects\n * shallow copy the object,\n * deep copy the\n * @param obj\n * @returns\n */\nexport function deepClone<T>(obj: T): T {\n  if (!obj) return obj\n  if (!Object.keys(obj).length) return {} as T\n  const ret = { ...obj }\n  Object.entries(obj).forEach(([k, v]: any) => {\n    if (typeof v !== \"object\") return\n    ret[k] = JSON.parse(JSON.stringify(v))\n  })\n  return ret\n}\n\nexport const clamp = (val, low, high) => {\n  if (val < low) return low;\n  if (val > high) return high;\n  return val\n}\nexport const getArrLastElement = (arr) =>\n  arr.length ? arr[arr.length - 1] : null\n\nexport const clamp01 = (val) => clamp(val, 0, 1)\nexport const clampPercent = (val) => clamp(val, 0, 100)\n\n//use to pretty print timestamps, or anything really.\nexport function strPadLeft(string, pad, length) {\n  return (new Array(length + 1).join(pad) + string).slice(-length);\n}\n\n//fuzzy compare strings. longer the distance, the higher the mismatch.\nexport function hammingDistance(str1, str2) {\n  var dist = 0;\n  str1 = str1.toLowerCase();\n  str2 = str2.toLowerCase();\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\n    let match = true\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\n      match = false\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\n      match = true\n    if (!match) dist++\n  }\n  return dist;\n}\n\n//multiplies every numerical value in the obj by a multiplier.\nexport function objMultiplication(obj, multi) {\n  if (multi === 1) return obj\n  Object.keys(obj).forEach((prop: any) => {\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\n  })\n  return obj\n}\n\n//assign obj.[keys...] = value\nexport function layeredAssignment(obj, keys: readonly string[], value) {\n  keys.reduce((accu, key, i, arr) => {\n    if (i === arr.length - 1) return (accu[key] = value)\n    if (!accu[key]) accu[key] = {}\n    return accu[key]\n  }, obj)\n  return obj\n}\n//get the value in a nested object, giving array of path\nexport function objPathValue(obj: object | undefined, keys: readonly string[]): any {\n  if (!obj || !keys) return undefined;\n  !Array.isArray(keys) && console.error(keys)\n  return keys.reduce((a, k) => a?.[k], obj)\n}\n//delete the value denoted by the path. Will also delete empty objects as well.\nexport function deletePropPath(obj, path) {\n  const tempPath = [...path]\n  const lastKey = tempPath.pop()\n  const objPathed = objPathValue(obj, tempPath)\n  delete objPathed?.[lastKey];\n}\n\nexport function objClearEmpties(o) {\n  for (const k in o) {\n    if (typeof o[k] !== \"object\") continue\n    objClearEmpties(o[k])\n    if (!Object.keys(o[k]).length) delete o[k];\n  }\n}\nexport function crawlObject(obj: any, keys: string[] = [], validate: (o: any, keys: string[]) => boolean, cb: (o: any, keys: string[]) => void) {\n  if (validate(obj, keys)) cb(obj, keys)\n  else obj && typeof obj === \"object\" && Object.entries(obj).forEach(([key, val]) => crawlObject(val, [...keys, key], validate, cb))\n}\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\nexport const getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\n\nexport function evalIfFunc<T, X>(value: T | ((arg: X) => T), arg: X): T {\n  return typeof value === \"function\" ? (value as any)(arg) : value\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyMap<K extends string | number, V>(keys: readonly K[], map: (key: K, i: number) => V): StrictDict<`${K}`, V> {\n  return Object.fromEntries(keys.map((k, i) => [k, map(k, i)])) as any\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyValueMap<T, K extends string | number, V>(items: readonly T[], map: (item: T) => [K, V]): StrictDict<`${K}`, V> {\n  return Object.fromEntries(items.map(t => map(t))) as any\n}\n\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>>\nexport function objectMap<K extends string, V, T>(obj: Record<K, V>, fn: (value: V, key: `${K}`, index: number) => T): Record<K, T>\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>> {\n  return Object.fromEntries(Object.entries(obj).map(\n    ([k, v], i) => [k, fn(v, k, i)]\n  )) as any\n}\n\nconst rangeGen = function* (from: number, to: number): Iterable<number> {\n  for (let i = from; i <= to; i++) yield i;\n};\n\n/** range of [from, to], inclusive */\nexport function range(from: number, to: number): number[] {\n  return [...rangeGen(from, to)]\n}\n\nexport function assertUnreachable(value: never): never {\n  throw new Error(`Should not reach this with value ${value}`)\n}\n\n/** Will change `arr` in-place */\nexport function toggleInArr<T>(arr: T[], value: T) {\n  const ind = arr.indexOf(value)\n  if (ind < 0) arr.push(value)\n  else arr.splice(ind, 1)\n}\n\nexport function toggleArr<T>(arr: T[], value: T) {\n  return arr.includes(value) ? arr.filter(a => a !== value) : [...arr, value]\n}\n\nexport function deepFreeze(obj: any, layers: number = 5) {\n  if (layers === 0) return\n  if (typeof obj === \"object\")\n    Object.values(Object.freeze(obj)).forEach(o => deepFreeze(o, layers--))\n}\n\nexport function arrayMove<T>(arr: T[], oldIndex: number, newIndex: number) {\n  if (newIndex < 0 || newIndex >= arr.length) return arr\n  if (oldIndex < 0 || oldIndex >= arr.length) return arr\n  arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\n  return arr\n}\n","\nimport { objectKeyMap } from \"../Util/Util\"\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\n\ntype Num = number | NumNode\ntype Str = string | undefined | StrNode\ntype Any = Num | Str\n\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\nexport const one = percent(1), naught = percent(0)\nexport const none = constant(\"none\")\n\nexport function constant(value: number, info?: Info): NumNode\nexport function constant(value: string | undefined, info?: Info): StrNode\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\n  return { operation: \"const\", operands: [], value, info }\n}\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\nexport function percent(value: number, info?: Info): NumNode {\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\n  return constant(value, { key: \"_\", ...info })\n}\n/** Inject `info` to the node in-place */\nexport function infoMut(node: NumNode, info: Info): NumNode\nexport function infoMut(node: StrNode, info: Info): StrNode\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\n  if (info) node.info = { ...node.info, ...info }\n  return node\n}\n\n/** `table[string] ?? defaultNode` */\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\n  return { operation: \"lookup\", operands, table, info }\n}\n\n/** min( x1, x2, ... ) */\nexport function min(...values: Num[]): NumNode {\n  return { operation: \"min\", operands: intoOps(values) }\n}\n/** max( x1, x2, ... ) */\nexport function max(...values: Num[]): NumNode {\n  return { operation: \"max\", operands: intoOps(values) }\n}\n/** x1 + x2 + ... */\nexport function sum(...values: Num[]): NumNode {\n  return { operation: \"add\", operands: intoOps(values) }\n}\n/** x1 * x2 * ... */\nexport function prod(...values: Num[]): NumNode {\n  return { operation: \"mul\", operands: intoOps(values) }\n}\n/** x / (x + c) */\nexport function frac(x: Num, c: Num): NumNode {\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\n}\nexport function res(base: Num): NumNode {\n  return { operation: \"res\", operands: intoOps([base]) }\n}\n\n/** v1 == v2 ? eq : neq */\nexport function compareEq(v1: Num, v2: Num, eq: Num, neq: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function compareEq(v1: Num, v2: Num, eq: Str, neq: Str, info?: Info): MatchNode<NumNode, StrNode>\nexport function compareEq(v1: Str, v2: Str, eq: Num, neq: Num, info?: Info): MatchNode<StrNode, NumNode>\nexport function compareEq(v1: Str, v2: Str, eq: Str, neq: Str, info?: Info): MatchNode<StrNode, StrNode>\nexport function compareEq(v1: Num | Str, v2: Num | Str, eq: Num | Str, neq: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(eq), intoV(neq)], info }\n}\n/** v1 == v2 ? pass : 0 */\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<StrNode, NumNode>\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\n}\n/** v1 == v2 ? pass : `undefined` */\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<NumNode, StrNode>\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, StrNode>\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<NumNode | StrNode, StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\n}\n/** v1 != v2 ? pass : 0 */\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<StrNode, NumNode>\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\n}\n/** v1 != v2 ? pass : `undefined` */\nexport function unequalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<NumNode, StrNode>\nexport function unequalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, StrNode>\nexport function unequalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<NumNode | StrNode, StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(undefined), intoV(pass)], info, emptyOn: \"match\" }\n}\n/** v1 >= v2 ? pass : 0 */\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\n}\n/** v1 >= v2 ? pass : `undefined` */\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\n}\n/** v1 < v2 ? pass : 0 */\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\n}\n\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\n  if (nodeList.operation) {\n    if (nodeList.operation !== \"read\")\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\n    return { ...nodeList, path: prefix }\n  } else {\n    return objectKeyMap(Object.keys(nodeList), key =>\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\n  }\n}\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\n  return { operation: \"data\", operands: [base], data }\n}\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\n  return { operation: \"data\", operands: [base], data, reset: true, info }\n}\n\n\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\n}\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\n  return { operation: \"read\", operands: [], path, type: \"string\" }\n}\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\n}\n/**\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\n */\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\n}\nexport function stringPrio(...operands: Str[]): StrNode {\n  return { operation: \"prio\", operands: intoOps(operands) }\n}\n/** list[index] */\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\n  return { operation: \"subscript\", operands: [index], list, info }\n}\n\nfunction intoOps(values: Num[]): NumNode[]\nfunction intoOps(values: Str[]): StrNode[]\nfunction intoOps(values: Any[]): AnyNode[]\nfunction intoOps(values: Any[]): AnyNode[] {\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\n}\nfunction intoV(value: Num): NumNode\nfunction intoV(value: Str): StrNode\nfunction intoV(value: Num | Str): NumNode | StrNode\nfunction intoV(value: Any): AnyNode {\n  return (typeof value !== \"object\") ? constant(value) : value\n}\n\ntype _NodeList = {\n  [key: string]: NodeList\n} & {\n  operation?: never\n}\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\n\n/**\n * `v1` === `v2` ? `match` : `unmatch`\n * @deprecated Use `equal`, `unequal`, `equalStr`, or `compareEq` instead\n */\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<NumNode, StrNode>\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<StrNode, NumNode>\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\n}\n","import { AnyNode, NumNode, StrNode } from \"./type\"\nimport { constant } from \"./utils\"\n\nexport function forEachNodes(formulas: (NumNode | StrNode)[], topDown: (formula: (NumNode | StrNode)) => void, bottomUp: (formula: (NumNode | StrNode)) => void): void {\n  const visiting = new Set<(NumNode | StrNode)>(), visited = new Set<(NumNode | StrNode)>()\n\n  function traverse(formula: (NumNode | StrNode)) {\n    if (visited.has(formula)) return\n\n    if (visiting.has(formula)) {\n      console.error(\"Found cyclical dependency during formula traversal\")\n      return\n    }\n    visiting.add(formula)\n\n    topDown(formula)\n\n    formula.operands.forEach(traverse)\n\n    bottomUp(formula)\n\n    visiting.delete(formula)\n    visited.add(formula)\n  }\n\n  formulas.forEach(traverse)\n}\n\nexport function mapFormulas(formulas: NumNode[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): NumNode[]\nexport function mapFormulas(formulas: (NumNode | StrNode)[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): (NumNode | StrNode)[] {\n  const visiting = new Set<(NumNode | StrNode)>()\n  const topDownMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\n  const bottomUpMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\n\n  function check(formula: (NumNode | StrNode)): (NumNode | StrNode) {\n    let topDown = topDownMapped.get(formula)\n    if (topDown) return topDown\n    topDown = topDownMap(formula)\n\n    let bottomUp = bottomUpMapped.get(topDown)\n    if (bottomUp) return bottomUp\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN)\n    }\n    visiting.add(topDown)\n\n    bottomUp = bottomUpMap(traverse(topDown), formula)\n\n    visiting.delete(topDown)\n\n    topDownMapped.set(formula, bottomUp)\n    bottomUpMapped.set(topDown, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: (NumNode | StrNode)): (NumNode | StrNode) {\n    const operands = formula.operands.map(check)\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands } as any\n  }\n\n  const result = formulas.map(check)\n  return arrayEqual(result, formulas) ? formulas : result\n}\n\nexport function mapContextualFormulas(formulas: NumNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): NumNode[]\nexport function mapContextualFormulas(formulas: AnyNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): AnyNode[] {\n  const visiting = new Set<AnyNode>()\n  const topDownByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\n  const bottomUpByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\n\n  function check(formula: AnyNode, parentContextId: ContextID): AnyNode {\n    let topDownMapping = topDownByContext.get(parentContextId)\n    if (!topDownMapping) {\n      topDownMapping = new Map()\n      topDownByContext.set(parentContextId, topDownMapping)\n    }\n\n    let topDown = topDownMapping.get(formula)\n    if (topDown) return topDown\n    let topDownContextId: number\n    [topDown, topDownContextId] = topDownMap(formula, parentContextId)\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN)\n    }\n\n    let bottomUpMapping = bottomUpByContext.get(topDownContextId)\n    if (!bottomUpMapping) {\n      bottomUpMapping = new Map()\n      bottomUpByContext.set(topDownContextId, bottomUpMapping)\n    }\n\n    let bottomUp = bottomUpMapping.get(topDown)\n    if (bottomUp) return bottomUp\n\n    visiting.add(topDown)\n    bottomUp = bottomUpMap(traverse(topDown, topDownContextId), formula, topDownContextId, parentContextId)\n    visiting.delete(topDown)\n\n    bottomUpMapping.set(topDown, bottomUp)\n    topDownMapping.set(formula, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: AnyNode, contextId: ContextID): AnyNode {\n    const operands = formula.operands.map(f => check(f, contextId))\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands }\n  }\n\n  const result = formulas.map(f => check(f, baseContextId))\n  return arrayEqual(formulas, result) ? formulas : result\n}\n\ntype ContextID = number\n\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\n  if (a === undefined) return b === undefined\n  if (b === undefined) return false\n\n  return a.length === b.length && a.every((value, i) => value === b[i])\n}\n","import type { ArtifactBuildData } from \"../PageCharacter/CharacterDisplay/Tabs/TabOptimize/common\"\nimport { assertUnreachable, objPathValue } from \"../Util/Util\"\nimport { forEachNodes, mapFormulas } from \"./internal\"\nimport { CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode } from \"./type\"\nimport { constant } from \"./utils\"\n\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\n  min: (x: number[]): number => Math.min(...x),\n  max: (x: number[]): number => Math.max(...x),\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\n}\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\n  ...allCommutativeMonoidOperations,\n  res: ([res]: number[]): number => {\n    if (res < 0) return 1 - res / 2\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\n    return 1 - res\n  },\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\n}\n\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\n\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\n  formulas = constantFold(formulas, topLevelData, shouldFold)\n  formulas = flatten(formulas)\n  formulas = deduplicate(formulas)\n  return formulas\n}\nexport function precompute(formulas: NumNode[], initial: ArtifactBuildData[\"values\"], binding: (readNode: ReadNode<number> | ReadNode<string | undefined>) => string, slotCount: number): (_: ArtifactBuildData[]) => number[] {\n  let body = `\n\"use strict\";\n// copied from the code above\nfunction res(res) {\n  if (res < 0) return 1 - res / 2\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\n  return 1 - res\n}\nconst x0=0`; // making sure `const` has at least one entry\n\n  let i = 1;\n  const names = new Map<NumNode | StrNode, string>()\n  forEachNodes(formulas, _ => { }, f => {\n    const { operation, operands } = f, name = `x${i++}`, operandNames = operands.map(x => names.get(x)!)\n    names.set(f, name)\n    switch (operation) {\n      case \"read\": {\n        const key = binding(f)\n        let arr = new Array(slotCount).fill(null).map((x, i) => `(b[${i}].values[\"${key}\"] ?? 0)`)\n        if (initial[key] && initial[key] !== 0) {\n          arr = [initial[key].toString(), ...arr]\n        }\n        body += `,${name}=${arr.join('+')}`\n        break\n      }\n      case \"const\": names.set(f, `(${f.value})`); break\n      case \"add\": case \"mul\": body += `,${name}=${operandNames.join(operation === \"add\" ? \"+\" : \"*\")}`; break\n      case \"min\": case \"max\": body += `,${name}=Math.${operation}(${operandNames})`; break\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = operandNames\n        body += `,${name}=(${value}>=${threshold})?${pass}:${fail}`\n        break\n      }\n      case \"res\": body += `,${name}=res(${operandNames[0]})`; break\n      case \"sum_frac\": body += `,${name}=${operandNames[0]}/(${operandNames[0]}+${operandNames[1]})`; break\n\n      case \"match\": case \"lookup\": case \"subscript\":\n      case \"prio\": case \"small\":\n      case \"data\": throw new Error(`Unsupported ${operation} node in precompute`)\n      default: assertUnreachable(operation)\n    }\n  })\n  body += `;\\nreturn [${formulas.map(f => names.get(f)!)}]`\n  return new (Function as any)(`b`, body)\n}\n\nfunction flatten(formulas: NumNode[]): NumNode[] {\n  return mapFormulas(formulas, f => f, _formula => {\n    let result = _formula\n    if (commutativeMonoidOperationSet.has(_formula.operation as any)) {\n      const formula = _formula as ComputeNode\n      const { operation } = formula\n\n      let flattened = false\n      const operands = formula.operands.flatMap(dep =>\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\n      result = flattened ? { ...formula, operands } : formula\n    }\n\n    return result\n  })\n}\nfunction deduplicate(formulas: NumNode[]): NumNode[] {\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\n    const result = new Map<T, number>()\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\n    return result\n  }\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\n  }\n\n  const wrap = {\n    common: {\n      counts: new Map<NumNode, number>(),\n      formulas: new Set<NumNode>(),\n      operation: \"add\" as Operation\n    }\n  }\n\n  while (true) {\n    let next: typeof wrap.common | undefined\n\n    const factored: ComputeNode = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\n\n    let candidatesByOperation = new Map<Operation, [ComputeNode, Map<NumNode, number>][]>()\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\n      candidatesByOperation.set(operation, [])\n\n    formulas = mapFormulas(formulas, _formula => {\n      if (wrap.common.formulas.has(_formula as NumNode)) {\n        const formula = _formula as ComputeNode\n        const remainingCounts = new Map(wrap.common.counts)\n        const operands = formula.operands.filter(dep => {\n          const count = remainingCounts.get(dep)\n          if (count) {\n            remainingCounts.set(dep, count - 1)\n            return false\n          }\n          return true\n        })\n\n        if (!operands.length)\n          return factored\n        operands.push(factored)\n        return { ...formula, operands }\n      }\n      return _formula\n    }, _formula => {\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\n      const formula = _formula as ComputeNode\n\n      if (next) {\n        if (next.operation === formula.operation) {\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<NumNode, number>()\n          const nextCounts = next.counts\n          let total = 0\n\n          for (const [dependency, currentCount] of currentCounts.entries()) {\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\n            if (commonCount) {\n              commonCounts.set(dependency, commonCount)\n              total += commonCount\n            } else commonCounts.delete(dependency)\n          }\n          if (total > 1) {\n            next.counts = commonCounts\n            next.formulas.add(formula)\n          }\n        }\n      } else {\n        const candidates = candidatesByOperation.get(formula.operation)!\n        const counts = elementCounts(formula.operands)\n\n        for (const [candidate, candidateCounts] of candidates) {\n          let total = 0\n\n          const commonCounts = new Map<NumNode, number>()\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\n            if (count) {\n              commonCounts.set(dependency, count)\n              total += count\n            }\n          }\n          if (total > 1) {\n            next = {\n              counts: commonCounts,\n              formulas: new Set([formula, candidate]),\n              operation: formula.operation\n            }\n            candidatesByOperation.clear()\n            break\n          }\n        }\n        if (!next) candidates.push([formula, counts])\n      }\n\n      return formula\n    })\n\n    if (next) wrap.common = next\n    else break\n  }\n\n  return formulas\n}\n\n/**\n * Replace nodes with known values with appropriate constants,\n * avoiding removal of any nodes that pass `isFixed` predicate\n */\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, NumNode | StrNode> }\n  const origin: Context = { data: [], processed: new Map() }\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\n\n  function fold(formula: StrNode, context: Context): StrNode\n  function fold(formula: NumNode, context: Context): NumNode\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode {\n    const old = context.processed.get(formula)\n    if (old) return old\n\n    const { operation } = formula\n    let result: NumNode | StrNode\n    switch (operation) {\n      case \"const\": return formula\n      case \"add\": case \"mul\": case \"max\": case \"min\":\n        const f = allOperations[operation]\n        const numericOperands: number[] = []\n        const formulaOperands: NumNode[] = formula.operands.filter(formula => {\n          const folded = fold(formula, context)\n          return (folded.operation === \"const\")\n            ? (numericOperands.push(folded.value), false)\n            : true\n        }).map(x => fold(x, context))\n        const numericValue = f(numericOperands)\n\n        // Fold degenerate cases. This may incorrectly compute NaN\n        // results, which shouldn't appear under expected usage.\n        // - zero\n        //   - 0 * ... = 0\n        // - infinity\n        //   - max(infinity, ...) = infinity\n        //   - infinity + ... = infinity\n        // - (-infinity)\n        //   - min(-infinity, ...) - infinity\n        //   - (-infinity) + ... = -infinity\n        // - NaN\n        //   - operation(NaN, ...) = NaN\n        if (!isFinite(numericValue)) {\n          if ((operation !== \"mul\") &&\n            (operation !== \"max\" || numericValue > 0) &&\n            (operation !== \"min\" || numericValue < 0)) {\n            result = constant(numericValue)\n            break\n          }\n        } else if (operation === \"mul\" && numericValue === 0) {\n          result = constant(numericValue)\n          break\n        }\n\n        if (numericValue !== f([])) // Skip vacuous values\n          formulaOperands.push(constant(numericValue))\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\n        else result = { operation, operands: formulaOperands }\n        break\n      case \"res\": case \"sum_frac\": {\n        const operands = formula.operands.map(x => fold(x, context))\n        const f = allOperations[operation]\n        if (operands.every(x => x.operation === \"const\"))\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\n        else result = { ...formula, operands }\n        break\n      }\n      case \"lookup\": {\n        const index = fold(formula.operands[0], context)\n        if (index.operation === \"const\") {\n          const selected = formula.table[index.value!] ?? formula.operands[1]\n          if (selected) {\n            result = fold(selected, context)\n            break\n          }\n        }\n        throw new Error(`Unsupported ${operation} node while folding`)\n      }\n      case \"prio\": {\n        const first = formula.operands.find(op => {\n          const folded = fold(op, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          return folded.value !== undefined\n        })\n        result = first ? fold(first, context) : constant(undefined)\n        break\n      }\n      case \"small\": {\n        let smallest = undefined as ConstantNode<string | undefined> | undefined\n        for (const operand of formula.operands) {\n          const folded = fold(operand, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          if (smallest?.value === undefined || (folded.value !== undefined && folded.value < smallest.value))\n            smallest = folded\n        }\n        result = smallest ?? constant(undefined)\n        break\n      }\n      case \"match\": {\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => fold(x, context))\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\n          throw new Error(`Unsupported ${operation} node while folding`)\n        result = (v1.value === v2.value) ? match : unmatch\n        break\n      }\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = formula.operands.map(x => fold(x, context))\n        if (value.operation === \"const\" && threshold.operation === \"const\")\n          result = value.value >= threshold.value ? pass : fail\n        else\n          result = { ...formula, operands: [value, threshold, pass, fail] }\n        break\n      }\n      case \"subscript\": {\n        const [index] = formula.operands.map(x => fold(x, context))\n        result = (index.operation === \"const\")\n          ? constant(formula.list[index.value])\n          : { ...formula, operands: [index] }\n        break\n      }\n      case \"read\": {\n        const operands = context.data\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\n          .filter(x => x)\n\n        if (operands.length === 0) {\n          if (shouldFold(formula)) {\n            const { accu } = formula\n            if (accu === undefined || accu === \"small\")\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\n            else result = constant(allOperations[accu]([]))\n          } else result = formula\n        } else if (formula.accu === undefined || operands.length === 1)\n          result = fold(operands[operands.length - 1], context)\n        else\n          result = fold({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\n        break\n      }\n      case \"data\":\n        if (formula.reset) context = origin\n        const map = nextContextMap.get(context)!\n        let nextContext = map.get(formula.data)\n        if (!nextContext) {\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\n          nextContextMap.set(nextContext, new Map())\n          map.set(formula.data, nextContext)\n        }\n        result = fold(formula.operands[0], nextContext)\n        break\n      default: assertUnreachable(operation)\n    }\n\n    context.processed.set(formula, result)\n    return result\n  }\n\n  const context = { data: [topLevelData], processed: new Map() }\n  nextContextMap.set(context, new Map())\n  nextContextMap.get(origin)!.set(topLevelData, context)\n  return formulas.map(x => fold(x, context))\n}\n\nexport const testing = {\n  constantFold, flatten, deduplicate\n}\n","export const allHitModes = [\"hit\", \"avgHit\", \"critHit\"] as const\nexport const allRegions = [\"mondstadt\", \"liyue\", \"inazuma\", \"sumeru\", \"fontaine\", \"natlan\", \"snezhnaya\", \"khaenriah\"] as const\nexport const allAmpReactions = [\"vaporize\", \"melt\",] as const\nexport const allAdditiveReactions = [\"spread\", \"aggravate\"] as const\nexport const allArtifactSetCount = [1, 2, 3, 4, 5] as const\nexport const allRarities = [5, 4, 3, 2, 1] as const\nexport const allArtifactRarities = [5, 4, 3] as const\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo', 'dendro'] as const\nexport const allElementsWithPhy = [\"physical\", ...allElements] as const\nexport const allInfusionAuraElements = [\"pyro\", 'cryo'] as const\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\nexport const allRollColorKeys = ['roll1', 'roll2', 'roll3', 'roll4', 'roll5', 'roll6'] as const\nexport const allAscension = [0, 1, 2, 3, 4, 5, 6] as const\nexport const allRefinement = [1, 2, 3, 4, 5] as const\nexport const substatType = [\"max\", \"mid\", \"min\"] as const\n\nexport const allArtifactSets = [\n  \"Adventurer\",\n  \"ArchaicPetra\",\n  \"Berserker\",\n  \"BlizzardStrayer\",\n  \"BloodstainedChivalry\",\n  \"BraveHeart\",\n  \"CrimsonWitchOfFlames\",\n  \"DeepwoodMemories\",\n  \"DefendersWill\",\n  \"EchoesOfAnOffering\",\n  \"EmblemOfSeveredFate\",\n  \"Gambler\",\n  \"GildedDreams\",\n  \"GladiatorsFinale\",\n  \"HeartOfDepth\",\n  \"HuskOfOpulentDreams\",\n  \"Instructor\",\n  \"Lavawalker\",\n  \"LuckyDog\",\n  \"MaidenBeloved\",\n  \"MartialArtist\",\n  \"NoblesseOblige\",\n  \"OceanHuedClam\",\n  \"PaleFlame\",\n  \"PrayersForDestiny\",\n  \"PrayersForIllumination\",\n  \"PrayersForWisdom\",\n  \"PrayersToSpringtime\",\n  \"ResolutionOfSojourner\",\n  \"RetracingBolide\",\n  \"Scholar\",\n  \"ShimenawasReminiscence\",\n  \"TenacityOfTheMillelith\",\n  \"TheExile\",\n  \"ThunderingFury\",\n  \"Thundersoother\",\n  \"TinyMiracle\",\n  \"TravelingDoctor\",\n  \"VermillionHereafter\",\n  \"ViridescentVenerer\",\n  \"WanderersTroupe\",\n] as const\nexport const nonTravelerCharacterKeys = [\n  \"Albedo\",\n  \"Amber\",\n  \"Barbara\",\n  \"Beidou\",\n  \"Bennett\",\n  \"Chongyun\",\n  \"Diluc\",\n  \"Diona\",\n  \"Fischl\",\n  \"Ganyu\",\n  \"HuTao\",\n  \"Jean\",\n  \"Kaeya\",\n  \"Keqing\",\n  \"Klee\",\n  \"KujouSara\",\n  \"KukiShinobu\",\n  \"Lisa\",\n  \"Mona\",\n  \"Ningguang\",\n  \"Noelle\",\n  \"Qiqi\",\n  \"Razor\",\n  \"Sucrose\",\n  \"Tartaglia\",\n  \"RaidenShogun\",\n  \"Venti\",\n  \"Xiangling\",\n  \"Xiao\",\n  \"Xingqiu\",\n  \"Xinyan\",\n  \"Rosaria\",\n  \"Yanfei\",\n  \"Eula\",\n  \"KaedeharaKazuha\",\n  \"KamisatoAyaka\",\n  \"Sayu\",\n  \"Shenhe\",\n  \"Yoimiya\",\n  \"Aloy\",\n  \"SangonomiyaKokomi\",\n  \"Thoma\",\n  \"Gorou\",\n  \"AratakiItto\",\n  \"YaeMiko\",\n  \"YunJin\",\n  \"Zhongli\",\n  \"KamisatoAyato\",\n  \"Yelan\",\n  \"ShikanoinHeizou\",\n  \"Collei\",\n  \"Dori\",\n  \"Tighnari\",\n] as const\nexport const locationCharacterKeys = [\n  ...nonTravelerCharacterKeys,\n  \"Traveler\",\n] as const\nexport const travelerElements = [\n  \"anemo\",\n  \"geo\",\n  \"electro\",\n  \"dendro\"\n] as const\nexport const travelerFKeys = [\n  \"TravelerAnemoF\",\n  \"TravelerGeoF\",\n  \"TravelerElectroF\",\n  \"TravelerDendroF\",\n] as const\nexport const travelerMKeys = [\n  \"TravelerAnemoM\",\n  \"TravelerGeoM\",\n  \"TravelerElectroM\",\n  \"TravelerDendroM\",\n] as const\nexport const travelerKeys = [\n  \"TravelerAnemo\",\n  \"TravelerGeo\",\n  \"TravelerElectro\",\n  \"TravelerDendro\",\n] as const\nexport const allCharacterKeys = [\n  ...nonTravelerCharacterKeys,\n  ...travelerKeys\n] as const\n\nexport const allCharacterSheetKeys = [\n  ...nonTravelerCharacterKeys,\n  ...travelerFKeys,\n  ...travelerMKeys,\n]\n\nexport const allWeaponSwordKeys = [\n  \"AmenomaKageuchi\",\n  \"AquilaFavonia\",\n  \"BlackcliffLongsword\",\n  \"CinnabarSpindle\",\n  \"CoolSteel\",\n  \"KagotsurubeIsshin\",\n  \"DarkIronSword\",\n  \"DullBlade\",\n  \"FavoniusSword\",\n  \"FesteringDesire\",\n  \"FilletBlade\",\n  \"FreedomSworn\",\n  \"HaranGeppakuFutsu\",\n  \"HarbingerOfDawn\",\n  \"IronSting\",\n  \"LionsRoar\",\n  \"MistsplitterReforged\",\n  \"PrimordialJadeCutter\",\n  \"PrototypeRancour\",\n  \"RoyalLongsword\",\n  \"SacrificialSword\",\n  \"SapwoodBlade\",\n  \"SilverSword\",\n  \"SkyriderSword\",\n  \"SkywardBlade\",\n  \"SummitShaper\",\n  \"SwordOfDescension\",\n  \"TheAlleyFlash\",\n  \"TheBlackSword\",\n  \"TheFlute\",\n  \"TravelersHandySword\",\n] as const\nexport type WeaponSwordKey = typeof allWeaponSwordKeys[number]\n\nexport const allWeaponClaymoreKeys = [\n  \"Akuoumaru\",\n  \"BlackcliffSlasher\",\n  \"BloodtaintedGreatsword\",\n  \"DebateClub\",\n  \"FavoniusGreatsword\",\n  \"FerrousShadow\",\n  \"ForestRegalia\",\n  \"KatsuragikiriNagamasa\",\n  \"LithicBlade\",\n  \"LuxuriousSeaLord\",\n  \"OldMercsPal\",\n  \"PrototypeArchaic\",\n  \"Rainslasher\",\n  \"RedhornStonethresher\",\n  \"RoyalGreatsword\",\n  \"SacrificialGreatsword\",\n  \"SerpentSpine\",\n  \"SkyriderGreatsword\",\n  \"SkywardPride\",\n  \"SnowTombedStarsilver\",\n  \"SongOfBrokenPines\",\n  \"TheBell\",\n  \"TheUnforged\",\n  \"WasterGreatsword\",\n  \"Whiteblind\",\n  \"WhiteIronGreatsword\",\n  \"WolfsGravestone\",\n] as const\nexport type WeaponClaymoreKey = typeof allWeaponClaymoreKeys[number]\n\nexport const allWeaponPolearmKeys = [\n  \"BeginnersProtector\",\n  \"BlackcliffPole\",\n  \"BlackTassel\",\n  \"CalamityQueller\",\n  \"CrescentPike\",\n  \"Deathmatch\",\n  \"DragonsBane\",\n  \"DragonspineSpear\",\n  \"EngulfingLightning\",\n  \"FavoniusLance\",\n  \"Halberd\",\n  \"IronPoint\",\n  \"KitainCrossSpear\",\n  \"LithicSpear\",\n  \"Moonpiercer\",\n  \"PrimordialJadeWingedSpear\",\n  \"PrototypeStarglitter\",\n  \"RoyalSpear\",\n  \"SkywardSpine\",\n  \"StaffOfHoma\",\n  \"TheCatch\",\n  \"VortexVanquisher\",\n  \"WavebreakersFin\",\n  \"WhiteTassel\",\n] as const\nexport type WeaponPoleArmKey = typeof allWeaponPolearmKeys[number]\n\nexport const allWeaponBowKeys = [\n  \"AlleyHunter\",\n  \"AmosBow\",\n  \"AquaSimulacra\",\n  \"BlackcliffWarbow\",\n  \"CompoundBow\",\n  \"ElegyForTheEnd\",\n  \"FadingTwilight\",\n  \"FavoniusWarbow\",\n  \"Hamayumi\",\n  \"HuntersBow\",\n  \"HuntersPath\",\n  \"KingsSquire\",\n  \"Messenger\",\n  \"MitternachtsWaltz\",\n  \"MouunsMoon\",\n  \"PolarStar\",\n  \"Predator\",\n  \"PrototypeCrescent\",\n  \"RavenBow\",\n  \"RecurveBow\",\n  \"RoyalBow\",\n  \"Rust\",\n  \"SacrificialBow\",\n  \"SeasonedHuntersBow\",\n  \"SharpshootersOath\",\n  \"SkywardHarp\",\n  \"Slingshot\",\n  \"TheStringless\",\n  \"TheViridescentHunt\",\n  \"ThunderingPulse\",\n  \"EndOfTheLine\",\n  \"WindblumeOde\",\n] as const\nexport type WeaponBowKey = typeof allWeaponBowKeys[number]\n\nexport const allWeaponCatalystKeys = [\n  \"ApprenticesNotes\",\n  \"BlackcliffAgate\",\n  \"DodocoTales\",\n  \"EmeraldOrb\",\n  \"EverlastingMoonglow\",\n  \"EyeOfPerception\",\n  \"FavoniusCodex\",\n  \"Frostbearer\",\n  \"FruitOfFulfillment\",\n  \"HakushinRing\",\n  \"KagurasVerity\",\n  \"LostPrayerToTheSacredWinds\",\n  \"MagicGuide\",\n  \"MappaMare\",\n  \"MemoryOfDust\",\n  \"OathswornEye\",\n  \"OtherworldlyStory\",\n  \"PocketGrimoire\",\n  \"PrototypeAmber\",\n  \"RoyalGrimoire\",\n  \"SacrificialFragments\",\n  \"SkywardAtlas\",\n  \"SolarPearl\",\n  \"TheWidsith\",\n  \"ThrillingTalesOfDragonSlayers\",\n  \"TwinNephrite\",\n  \"WineAndSong\",\n] as const\nexport type WeaponCatalystKey = typeof allWeaponCatalystKeys[number]\n\nexport const allWeaponKeys = [\n  ...allWeaponSwordKeys,\n  ...allWeaponClaymoreKeys,\n  ...allWeaponPolearmKeys,\n  ...allWeaponBowKeys,\n  ...allWeaponCatalystKeys,\n] as const\nexport type WeaponKey = WeaponSwordKey | WeaponClaymoreKey | WeaponPoleArmKey | WeaponBowKey | WeaponCatalystKey\n\nexport const characterSpecializedStatKeys = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"dendro_dmg_\"] as const\n\nexport type HitModeKey = typeof allHitModes[number]\nexport type Region = typeof allRegions[number]\nexport type AmpReactionKey = typeof allAmpReactions[number]\nexport type AdditiveReactionKey = typeof allAdditiveReactions[number]\nexport type SetNum = typeof allArtifactSetCount[number]\nexport type Rarity = typeof allRarities[number]\nexport type ArtifactRarity = typeof allArtifactRarities[number]\nexport type SlotKey = typeof allSlotKeys[number]\nexport type ElementKey = typeof allElements[number]\nexport type ElementKeyWithPhy = typeof allElementsWithPhy[number]\nexport type InfusionAuraElements = typeof allInfusionAuraElements[number]\nexport type ArtifactSetKey = typeof allArtifactSets[number]\nexport type NonTravelerCharacterKey = typeof nonTravelerCharacterKeys[number]\nexport type CharacterKey = typeof allCharacterKeys[number]\nexport type CharacterSheetKey = typeof allCharacterSheetKeys[number]\nexport type LocationCharacterKey = typeof locationCharacterKeys[number]\nexport type TravelerKey = typeof travelerKeys[number]\nexport type TravelerElementKey = typeof travelerElements[number]\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]\nexport type RollColorKey = typeof allRollColorKeys[number]\nexport type Ascension = typeof allAscension[number]\nexport type Refinement = typeof allRefinement[number]\nexport type CharacterSpecializedStatKey = typeof characterSpecializedStatKeys[number]\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\nexport const allowedAmpReactions: Dict<ElementKey, AmpReactionKey[]> = {\n  pyro: [\"vaporize\", \"melt\"],\n  hydro: [\"vaporize\"],\n  cryo: [\"melt\"],\n  anemo: [\"vaporize\", \"melt\"],\n}\nexport const allowedAdditiveReactions: Dict<ElementKey, AdditiveReactionKey[]> = {\n  dendro: [\"spread\"],\n  electro: [\"aggravate\"],\n  anemo: [\"aggravate\"],\n}\n\nexport type SubstatType = typeof substatType[number]\n\nexport function charKeyToLocCharKey(charKey: CharacterKey): LocationCharacterKey {\n  if (travelerKeys.includes(charKey as TravelerKey)) return \"Traveler\"\n  return charKey as LocationCharacterKey\n}\n\nexport function TravelerToElement(key: TravelerKey, element: TravelerElementKey): TravelerKey {\n  return \"Traveler\" + element.toUpperCase().slice(0, 1) + element.slice(1) as TravelerKey\n}\n\nexport type LocationKey = LocationCharacterKey | \"\"\n\nexport function charKeyToCharName(ck: CharacterKey, gender: \"F\" | \"M\"): string {\n  return ck.startsWith(\"Traveler\") ? \"Traveler\" + gender : ck\n}\n","import { ArtSetExclusion } from \"../../../../Database/Data/BuildsettingData\";\nimport { forEachNodes, mapFormulas } from \"../../../../Formula/internal\";\nimport { allOperations, constantFold } from \"../../../../Formula/optimization\";\nimport { ConstantNode, NumNode } from \"../../../../Formula/type\";\nimport { constant, customRead, max, min } from \"../../../../Formula/utils\";\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from \"../../../../Types/consts\";\nimport { assertUnreachable, objectKeyMap, objectMap, range } from \"../../../../Util/Util\";\n\ntype DynMinMax = { [key in string]: MinMax }\ntype MinMax = { min: number, max: number }\n\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\nexport function pruneAll(nodes: NumNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion, forced: Dict<MicropassOperation, boolean>): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  let should = forced\n  /** If `key` makes progress, all operations in `value` should be performed */\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\n    pruneOrder: { pruneNodeRange: true },\n    pruneArtRange: { pruneNodeRange: true },\n    pruneNodeRange: { reaffine: true },\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\n  }\n  let count = 0\n  while (Object.values(should).some(x => x) && count++ < 20) {\n    if (should.pruneOrder) {\n      delete should.pruneOrder\n      const newArts = pruneOrder(arts, numTop, exclusion)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneOrder }\n      }\n    }\n    if (should.pruneArtRange) {\n      delete should.pruneArtRange\n      const newArts = pruneArtRange(nodes, arts, minimum)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneArtRange }\n      }\n    }\n    if (should.pruneNodeRange) {\n      delete should.pruneNodeRange\n      const newNodes = pruneNodeRange(nodes, arts)\n      if (nodes !== newNodes) {\n        nodes = newNodes\n        should = { ...should, ...deps.pruneNodeRange }\n      }\n    }\n    if (should.reaffine) {\n      delete should.reaffine\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\n      if (nodes !== newNodes || arts !== newArts) {\n        nodes = newNodes\n        arts = newArts\n        should = { ...should, ...deps.reaffine }\n      }\n    }\n  }\n  return { nodes, arts }\n}\n\nfunction reaffine(nodes: NumNode[], arts: ArtifactsBySlot, forceRename: boolean = false): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  const affineNodes = new Set<NumNode>(), topLevelAffine = new Set<NumNode>()\n\n  function visit(node: NumNode, isAffine: boolean) {\n    if (isAffine) affineNodes.add(node)\n    else node.operands.forEach(_op => {\n      const op = _op as NumNode\n      affineNodes.has(op) && topLevelAffine.add(op)\n    })\n  }\n\n  const dynKeys = new Set<string>()\n\n  forEachNodes(nodes, _ => { }, f => {\n    const operation = f.operation\n    switch (operation) {\n      case \"read\":\n        if (f.type !== \"number\" || f.path[0] !== \"dyn\" || f.accu !== \"add\")\n          throw new Error(`Found unsupported ${operation} node at path ${f.path} when computing affine nodes`)\n        dynKeys.add(f.path[1])\n        visit(f, true)\n        break\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\n      case \"mul\": {\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\n        break\n      }\n      case \"const\":\n        if (typeof f.value === \"string\" || f.value === undefined)\n          throw new Error(`Found constant ${f.value} while compacting`)\n        visit(f as NumNode, true); break\n      case \"res\": case \"threshold\": case \"sum_frac\":\n      case \"max\": case \"min\": visit(f, false); break\n      case \"data\": case \"subscript\": case \"lookup\": case \"match\": case \"prio\": case \"small\":\n        throw new Error(`Found unsupported ${operation} node when computing affine nodes`)\n      default: assertUnreachable(operation)\n    }\n  })\n\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\") &&\n    Object.keys(arts.base).length === dynKeys.size)\n    return { nodes, arts }\n\n  let current = -1\n  function nextDynKey(): string {\n    while (dynKeys.has(`${++current}`));\n    return `${current}`\n  }\n\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\n  const affineMap = new Map(affine.map(node => [node,\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\n      ? node\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\n  nodes = mapFormulas(nodes, f => affineMap.get(f as NumNode) ?? f, f => f)\n\n  function reaffineArt(stat: DynStat): DynStat {\n    const values = constantFold([...affineMap.keys()], {\n      dyn: objectMap(stat, (value) => constant(value))\n    } as any, _ => true)\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\n  }\n  const result = {\n    nodes, arts: {\n      base: reaffineArt(arts.base),\n      values: objectKeyMap(allSlotKeys, slot =>\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\n    }\n  }\n  const offsets = Object.entries(reaffineArt({}))\n  for (const arts of Object.values(result.arts.values))\n    for (const { values } of arts)\n      for (const [key, baseValue] of offsets)\n        values[key] -= baseValue\n  return result\n}\n/** Remove artifacts that cannot be in top `numTop` builds */\nexport function pruneOrder(arts: ArtifactsBySlot, numTop: number, exclusion: ArtSetExclusion): ArtifactsBySlot {\n  let progress = false\n  const noRainbow = !exclusion.rainbow?.length\n  const noSwitchIn = new Set(Object.entries(exclusion).filter(([_, v]) => v.length).map(([k]) => k) as ArtifactSetKey[])\n  const noSwitchOut = new Set(Object.entries(exclusion).filter(([_, v]) => v.includes(2) && !v.includes(4)).map(([k]) => k) as ArtifactSetKey[])\n  const values = objectKeyMap(allSlotKeys, slot => {\n    const list = arts.values[slot]\n    const newList = list.filter(art => {\n      let count = 0\n      return list.every(other => {\n        const greaterEqual = Object.entries(other.values).every(([k, o]) => o >= art.values[k])\n        const greater = Object.entries(other.values).some(([k, o]) => o > art.values[k])\n        if (greaterEqual && (greater || other.id > art.id) &&\n          ((noRainbow && !noSwitchIn.has(other.set!) && !noSwitchOut.has(art.set!)) || art.set === other.set))\n          count++\n        return count < numTop\n      })\n    })\n    if (newList.length !== list.length) progress = true\n    return newList\n  })\n  return progress ? { base: arts.base, values } : arts\n}\n/** Remove artifacts that cannot reach `minimum` in any build */\nfunction pruneArtRange(nodes: NumNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const wrap = { arts }\n  while (true) {\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\n\n    let progress = false\n    const values = objectKeyMap(allSlotKeys, slot => {\n      const result = wrap.arts.values[slot].filter(art => {\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\n        const newRange = computeNodeRange(nodes, read)\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\n      })\n      if (result.length !== wrap.arts.values[slot].length)\n        progress = true\n      return result\n    })\n    if (!progress) break\n    wrap.arts = { base: wrap.arts.base, values }\n  }\n  return wrap.arts\n}\nfunction pruneNodeRange(nodes: NumNode[], arts: ArtifactsBySlot): NumNode[] {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\n  const nodeRange = computeNodeRange(nodes, reads)\n\n  return mapFormulas(nodes, f => {\n    const { operation } = f\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\n    switch (operation) {\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = operandRanges\n        if (value.min >= threshold.max) return f.operands[2]\n        else if (value.max < threshold.min) return f.operands[3]\n        if (pass.max === pass.min &&\n          fail.max === fail.min &&\n          pass.min === fail.min && isFinite(pass.min))\n          return constant(pass.max)\n        break\n      }\n      case \"min\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\n        })\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\n        break\n      }\n      case \"max\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every(op2 => op1.max >= op2.min)\n        })\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\n        break\n      }\n    }\n    return f\n  }, f => f)\n}\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\n  const result: DynMinMax = {}\n  ranges.forEach(range => {\n    Object.entries(range).forEach(([key, value]) => {\n      if (result[key]) {\n        result[key].min += value.min\n        result[key].max += value.max\n      } else result[key] = { ...value }\n    })\n  })\n  return result\n}\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\n  const result: DynMinMax = {}\n  if (arts.length) {\n    Object.keys(arts[0].values)\n      .filter(key => arts.every(art => art.values[key]))\n      .forEach(key => result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\n    arts.forEach(({ values }) => {\n      for (const [key, value] of Object.entries(values)) {\n        if (!result[key]) result[key] = { min: 0, max: value }\n        else {\n          if (result[key].max < value) result[key].max = value\n          if (result[key].min > value) result[key].min = value\n        }\n      }\n    })\n  }\n  return result\n}\nfunction computeNodeRange(nodes: NumNode[], reads: DynMinMax): Map<NumNode, MinMax> {\n  const range = new Map<NumNode, MinMax>()\n\n  forEachNodes(nodes, _ => { }, _f => {\n    const f = _f as NumNode\n    const { operation } = f\n    const operands = f.operands.map(op => range.get(op)!)\n    let current: MinMax\n    switch (operation) {\n      case \"read\":\n        if (f.path[0] !== \"dyn\")\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\n        break\n      case \"const\": current = computeMinMax([f.value]); break\n      case \"subscript\": current = computeMinMax(f.list); break\n      case \"add\": case \"min\": case \"max\":\n        current = {\n          min: allOperations[operation](operands.map(x => x.min)),\n          max: allOperations[operation](operands.map(x => x.max)),\n        }; break\n      case \"res\": current = {\n        min: allOperations[operation]([operands[0].max]),\n        max: allOperations[operation]([operands[0].min]),\n      }; break\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\n        accu.min * current.min, accu.min * current.max,\n        accu.max * current.min, accu.max * current.max,\n      ])); break\n      case \"threshold\":\n        if (operands[0].min >= operands[1].max) current = operands[2]\n        else if (operands[0].max < operands[1].min) current = operands[3]\n        else current = computeMinMax([], [operands[2], operands[3]])\n        break\n      case \"sum_frac\": {\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\n        if (sum.min <= 0 && sum.max >= 0)\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\n        else\n          // TODO: Check this\n          current = computeMinMax([\n            x.min / sum.min, x.min / sum.max,\n            x.max / sum.min, x.max / sum.max\n          ])\n        break\n      }\n      case \"data\": case \"lookup\": case \"match\":\n        throw new Error(`Unsupported ${operation} node`)\n      default: assertUnreachable(operation)\n    }\n    range.set(f, current)\n  })\n  return range\n}\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\n  return { min, max }\n}\n\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\n  return {\n    base: arts.base,\n    values: objectKeyMap(allSlotKeys, slot => {\n      const filter = filters[slot]\n      switch (filter.kind) {\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set!))\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set!))\n      }\n    })\n  }\n}\n\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\n}\nexport function mergePlot(plots: PlotData[]): PlotData {\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\n  while (keys.size > maxCount) {\n    scale *= reductionScaling\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\n  }\n  const result: PlotData = {}\n  for (const plot of plots)\n    for (const build of Object.values(plot)) {\n      const x = Math.round(build.plot! / scale) * scale\n      if (!result[x] || result[x]!.value < build.value)\n        result[x] = build\n    }\n  return result\n}\n\nexport function countBuilds(arts: ArtifactsBySlot): number {\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\n}\n\n\nexport function* filterFeasiblePerm(filters: Iterable<RequestFilter>, _artSets: ArtifactsBySlot): Iterable<RequestFilter> {\n  const artSets = objectMap(_artSets.values, values => new Set(values.map(v => v.set)))\n  filter_loop: for (const filter of filters) {\n    for (const [slot, f] of Object.entries(filter)) {\n      const available = artSets[slot]!\n      switch (f.kind) {\n        case \"required\": if ([...f.sets].every(s => !available.has(s))) continue filter_loop; break\n        case \"exclude\": if ([...available].every(s => f.sets.has(s!))) continue filter_loop; break\n        case \"id\": break\n      }\n    }\n    yield filter\n  }\n}\nexport function exclusionToAllowed(exclusion: number[] | undefined): Set<number> {\n  return new Set(exclusion?.includes(2)\n    ? exclusion.includes(4) ? [0, 1] : [0, 1, 4, 5]\n    : exclusion?.includes(4) ? [0, 1, 2, 3] : [0, 1, 2, 3, 4, 5])\n}\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\nexport function* artSetPerm(exclusion: ArtSetExclusion, _artSets: ArtifactSetKey[]): Iterable<RequestFilter> {\n  /**\n   * This generation algorithm is separated into two parts:\n   * - \"Shape\" generation\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\n   * - Shape filling\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\n   */\n  const artSets = [...new Set(_artSets)], allowedRainbows = exclusionToAllowed(exclusion.rainbow)\n  let shapes: number[][] = []\n  function populateShapes(current: number[], list: Set<number>, rainbows: number[]) {\n    if (current.length === 5) {\n      if (allowedRainbows.has(rainbows.length))\n        shapes.push(current)\n      return\n    }\n    for (const i of list) populateShapes([...current, i], list, rainbows.filter(j => j !== i))\n    populateShapes([...current, current.length], new Set([...list, current.length]), [...rainbows, current.length])\n  }\n  populateShapes([0], new Set([0]), [0])\n  function indexOfShape(shape: number[], replacing: number) {\n    if (range(replacing + 1, 4).some(i => shape[i] !== 5))\n      return undefined\n    shape = [...shape]\n    shape[replacing] = 5\n    return shape.reduce((a, b) => a * 6 + b, 0)\n  }\n  for (let replacing = 4; replacing >= 0; replacing--) {\n    const required: Map<number, number> = new Map()\n    for (const shape of shapes) {\n      const id = indexOfShape(shape, replacing)\n      if (id === undefined) continue\n      required.set(id, (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1)\n    }\n    for (const [id, remaining] of required.entries()) {\n      if (remaining === 0) {\n        const shape = [...shapes.find(shape => indexOfShape(shape, replacing) === id)!]\n        shape[replacing] = 5\n        shapes = shapes.filter(shape => indexOfShape(shape, replacing) !== id)\n        shapes.push(shape)\n      }\n    }\n  }\n\n  // Shapes are now calculated and merged, proceed to fill in the sets\n\n  const noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\n  const result: RequestFilter = objectKeyMap(allSlotKeys, _ => noFilter)\n\n  const counts = { ...objectMap(exclusion, _ => 0), ...objectKeyMap(artSets, _ => 0) }\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\n\n  function* check(shape: number[]) {\n    const used: Set<ArtifactSetKey> = new Set()\n    let groupped: number[][] = [], rainbows: number[] = []\n    for (const i of shape) {\n      groupped.push([])\n      if (i === 5) rainbows.push(groupped.length - 1)\n      else groupped[i].push(groupped.length - 1)\n    }\n    groupped = groupped.filter(v => v.length).sort((a, b) => b.length - a.length)\n    let usableRainbows = rainbows.length\n\n    // Inception.. because js doesn't like functions inside a for-loop\n    function* check(i: number) {\n      if (i === groupped.length)\n        return yield* check_free(0)\n\n      for (const set of artSets) {\n        if (used.has(set)) continue\n        const length = groupped[i].length, allowedSet = allowedCounts[set]\n        let requiredRainbows = 0\n\n        if (allowedSet && !allowedSet.has(length)) {\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\n          requiredRainbows = (range(length + 1, 5).find(l => allowedSet.has(l)) ?? 6) - length\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\n        }\n\n        used.add(set)\n        counts[set] = groupped[i].length\n        groupped[i].forEach(j => result[allSlotKeys[j]] = { kind: \"required\", sets: new Set([set]) })\n        usableRainbows -= requiredRainbows\n\n        yield* check(i + 1)\n\n        usableRainbows += requiredRainbows\n        counts[set] = 0\n        used.delete(set)\n      }\n    }\n    // We separate filling rainbow slots from groupped slots because it has an entirely\n    // different set of rules regarding what can be filled and what states to be kept.\n    function* check_free(i: number) {\n      const remaining = rainbows.length - i, isolated: ArtifactSetKey[] = [], missing: ArtifactSetKey[] = [], rejected: ArtifactSetKey[] = []\n      let required = 0\n      for (const set of artSets) {\n        const allowedSet = allowedCounts[set], count = counts[set]\n        if (!allowedSet) continue\n        if (range(1, remaining).every(j => !allowedSet.has(count + j))) rejected.push(set)\n        else if (!allowedSet.has(count)) {\n          required += [...allowedSet].find(x => x > count)! - count\n          missing.push(set)\n        }\n        else if (range(0, remaining).some(j => !allowedSet.has(count + j))) isolated.push(set)\n      }\n      if (required > remaining) return\n      if (i === rainbows.length) {\n        yield { ...result }\n        return\n      }\n      if (required === remaining) {\n        for (const set of missing) {\n          counts[set]++\n          result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\n          yield* check_free(i + 1)\n          counts[set]--\n        }\n        return\n      }\n      for (const set of [...isolated, ...missing]) {\n        counts[set]++\n        result[allSlotKeys[rainbows[i]]] = { kind: \"required\", sets: new Set([set]) }\n        yield* check_free(i + 1)\n        counts[set]--\n      }\n      result[allSlotKeys[rainbows[i]]] = { kind: \"exclude\", sets: new Set([...missing, ...rejected, ...isolated]) }\n      yield* check_free(i + 1)\n    }\n    yield* check(0)\n  }\n  for (const shape of shapes) yield* check(shape)\n}\n\nexport type RequestFilter = StrictDict<SlotKey,\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\n  { kind: \"id\", ids: Set<string> }\n>\n\nexport type DynStat = { [key in string]: number }\nexport type ArtifactBuildData = {\n  id: string\n  set?: ArtifactSetKey\n  values: DynStat\n}\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\n\nexport type PlotData = Dict<number, Build>\nexport interface Build {\n  value: number\n  plot?: number\n  artifactIds: string[]\n}\n","import { ArtSetExclusion } from '../../../../Database/Data/BuildsettingData'\nimport { NumNode } from '../../../../Formula/type'\nimport { assertUnreachable } from '../../../../Util/Util'\nimport { ArtifactsBySlot, artSetPerm, Build, countBuilds, filterArts, filterFeasiblePerm, PlotData, RequestFilter } from \"./common\"\nimport { ComputeWorker } from \"./ComputeWorker\"\nimport { SplitWorker } from \"./SplitWorker\"\n\nlet id: number, splitWorker: SplitWorker, computeWorker: ComputeWorker\n\nonmessage = ({ data }: { data: WorkerCommand }) => {\n  const command = data.command\n  let result: WorkerResult\n  switch (command) {\n    case \"setup\":\n      id = data.id\n      const splitID = `split${id}`, computeID = `compute${id}`\n      splitWorker = new SplitWorker(data, interim => postMessage({ id, source: splitID, ...interim }))\n      computeWorker = new ComputeWorker(data, interim => postMessage({ id, source: computeID, ...interim }))\n      result = { command: \"iterate\" }\n      break\n    case \"split\":\n      if (data.filter) splitWorker.addFilter(data.filter)\n      let total = 0, split = splitWorker.split(data.threshold, data.minCount)\n      while (split && split.count <= 50_000 && total <= 500_000) {\n        total += split.count\n        computeWorker.compute(-Infinity, split.filter)\n        split = splitWorker.split(-Infinity, data.minCount)\n      }\n      result = { command: \"split\", filter: split?.filter }\n      break\n    case \"iterate\":\n      const { threshold, filter } = data\n      computeWorker.compute(threshold, filter)\n      result = { command: \"iterate\" }\n      break\n    case \"finalize\":\n      computeWorker.refresh(true)\n      const { builds, plotData } = computeWorker\n      result = { command: \"finalize\", builds, plotData }\n      break\n    case \"count\":\n      {\n        const { exclusion } = data, arts = computeWorker.arts\n        const setPerm = filterFeasiblePerm(artSetPerm(exclusion, [...new Set(Object.values(arts.values).flatMap(x => x.map(x => x.set!)))]), arts)\n        let counts = data.arts.map(_ => 0)\n        for (const perm of setPerm)\n          data.arts.forEach((arts, i) => counts[i] += countBuilds(filterArts(arts, perm)));\n        result = { command: \"count\", counts }\n        break\n      }\n    default: assertUnreachable(command)\n  }\n  postMessage({ id, ...result });\n}\n\nexport type WorkerCommand = Setup | Split | Iterate | Finalize | Count\nexport type WorkerResult = SourcedInterimResult | SplitResult | IterateResult | FinalizeResult | CountResult\n\nexport interface Setup {\n  command: \"setup\"\n\n  id: number\n  arts: ArtifactsBySlot\n\n  optimizationTarget: NumNode\n  filters: { value: NumNode, min: number }[]\n  plotBase: NumNode | undefined,\n  maxBuilds: number\n}\nexport interface Split {\n  command: \"split\"\n  threshold: number\n  minCount: number\n  filter?: RequestFilter\n}\nexport interface Iterate {\n  command: \"iterate\"\n  threshold: number\n  filter: RequestFilter\n}\n\nexport interface Finalize {\n  command: \"finalize\"\n}\nexport interface Count {\n  command: \"count\"\n  arts: ArtifactsBySlot[]\n  exclusion: ArtSetExclusion\n}\nexport interface SplitResult {\n  command: \"split\"\n  filter: RequestFilter | undefined\n}\nexport interface IterateResult {\n  command: \"iterate\"\n}\nexport interface FinalizeResult {\n  command: \"finalize\"\n  builds: Build[]\n  plotData?: PlotData\n}\nexport interface CountResult {\n  command: \"count\"\n  counts: number[]\n}\nexport interface InterimResult {\n  command: \"interim\"\n  buildValues: number[] | undefined\n  /** The number of builds since last report, including failed builds */\n  tested: number\n  /** The number of builds that does not meet the min-filter requirement since last report */\n  failed: number\n  skipped: number\n}\nexport interface SourcedInterimResult extends InterimResult {\n  /** the source of the message, must be unique for each source of `buildValues` */\n  source: string\n}\n","import { optimize, precompute } from '../../../../Formula/optimization';\nimport type { NumNode } from '../../../../Formula/type';\nimport type { InterimResult, Setup } from './BackgroundWorker';\nimport { ArtifactBuildData, ArtifactsBySlot, Build, countBuilds, filterArts, mergePlot, PlotData, pruneAll, RequestFilter } from './common';\n\nexport class ComputeWorker {\n  builds: Build[] = []\n  buildValues: number[] | undefined = undefined\n  plotData: PlotData | undefined\n  threshold: number = -Infinity\n  maxBuilds: number\n  min: number[]\n\n  arts: ArtifactsBySlot\n  nodes: NumNode[]\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters, plotBase, maxBuilds }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = filters.map(x => x.min)\n    this.maxBuilds = maxBuilds\n    this.callback = callback\n    this.nodes = filters.map(x => x.value)\n    this.nodes.push(optimizationTarget)\n    if (plotBase) {\n      this.plotData = {}\n      this.nodes.push(plotBase)\n    }\n    this.nodes = optimize(this.nodes, {}, _ => false)\n  }\n\n  compute(newThreshold: number, filter: RequestFilter) {\n    if (this.threshold > newThreshold) this.threshold = newThreshold\n    const { min, interimReport } = this, self = this // `this` in nested functions means different things\n    let preArts = filterArts(this.arts, filter)\n    const totalCount = countBuilds(preArts)\n\n    let nodes = this.nodes;\n    ({ nodes, arts: preArts } = pruneAll(nodes, min, preArts, this.maxBuilds, {}, {\n      pruneArtRange: true, pruneNodeRange: true,\n    }))\n    const arts = Object.values(preArts.values).sort((a, b) => a.length - b.length)\n    const compute = precompute(nodes, preArts.base, f => f.path[1], arts.length)\n\n    const buffer = Array<ArtifactBuildData>(arts.length)\n    const count = { tested: 0, failed: 0, skipped: totalCount - countBuilds(preArts) }\n\n    function permute(i: number) {\n      if (i < 0) {\n        const result = compute(buffer)\n        if (min.every((m, i) => (m <= result[i]))) {\n          const value = result[min.length], { builds, plotData } = self\n          let build: Build | undefined\n          if (value >= self.threshold) {\n            build = { value, artifactIds: buffer.map(x => x.id) }\n            builds.push(build)\n          }\n          if (plotData) {\n            const x = result[min.length + 1]\n            if (!plotData[x] || plotData[x]!.value < value) {\n              if (!build) build = { value, artifactIds: buffer.map(x => x.id) }\n              build.plot = x\n              plotData[x] = build\n            }\n          }\n        }\n        else count.failed += 1\n        return\n      }\n      arts[i].forEach(art => {\n        buffer[i] = art\n        permute(i - 1)\n      })\n      if (i === 0) {\n        count.tested += arts[0].length\n        if (count.tested > 1 << 16)\n          interimReport(count)\n      }\n    }\n\n    permute(arts.length - 1)\n    this.interimReport(count)\n  }\n\n  refresh(force: boolean): void {\n    const { maxBuilds } = this\n    if (Object.keys(this.plotData ?? {}).length >= 100000)\n      this.plotData = mergePlot([this.plotData!])\n\n    if (this.builds.length >= 1000 || force) {\n      this.builds = this.builds\n        .sort((a, b) => b.value - a.value)\n        .slice(0, maxBuilds)\n      this.buildValues = this.builds.map(x => x.value)\n      this.threshold = Math.max(this.threshold, this.buildValues[maxBuilds - 1] ?? -Infinity)\n    }\n  }\n  interimReport = (count: { tested: number, failed: number, skipped: number }) => {\n    this.refresh(false)\n    this.callback({ command: \"interim\", buildValues: this.buildValues, ...count })\n    this.buildValues = undefined\n    count.tested = 0\n    count.failed = 0\n    count.skipped = 0\n  }\n}\n","import type { NumNode } from '../../../../Formula/type';\nimport { allSlotKeys } from '../../../../Types/consts';\nimport type { InterimResult, Setup } from './BackgroundWorker';\nimport { ArtifactsBySlot, countBuilds, filterArts, RequestFilter } from './common';\n\nexport class SplitWorker {\n  min: number[]\n\n  arts: ArtifactsBySlot\n  nodes: NumNode[]\n\n  filters: { count: number, filter: RequestFilter }[] = []\n\n  callback: (interim: InterimResult) => void\n\n  constructor({ arts, optimizationTarget, filters }: Setup, callback: (interim: InterimResult) => void) {\n    this.arts = arts\n    this.min = filters.map(x => x.min)\n    this.nodes = filters.map(x => x.value)\n    this.callback = callback\n\n    this.min.push(-Infinity)\n    this.nodes.push(optimizationTarget)\n  }\n  addFilter(filter: RequestFilter) {\n    const count = countBuilds(filterArts(this.arts, filter))\n    this.filters.push({ count, filter })\n  }\n  split(newThreshold: number, minCount: number) {\n    if (this.min[this.min.length - 1] > newThreshold) this.min[this.min.length - 1] = newThreshold\n\n    while (this.filters.length) {\n      const { count, filter } = this.filters.pop()!\n      if (count <= minCount) return { count, filter }\n      splitBySetOrID(this.arts, filter, minCount).forEach(filter => this.addFilter(filter))\n    }\n  }\n}\n\nfunction splitBySetOrID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\n  const arts = filterArts(_arts, filter)\n\n  const candidates = allSlotKeys\n    .map(slot => ({ slot, sets: new Set(arts.values[slot].map(x => x.set)) }))\n    .filter(({ sets }) => sets.size > 1)\n  if (!candidates.length)\n    return splitByID(arts, filter, limit)\n  const { sets, slot } = candidates.reduce((a, b) => a.sets.size < b.sets.size ? a : b)\n  return [...sets].map(set => ({ ...filter, [slot]: { kind: \"required\", sets: new Set([set]) } }))\n}\nfunction splitByID(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): RequestFilter[] {\n  const arts = filterArts(_arts, filter)\n  const count = countBuilds(arts)\n\n  const candidates = allSlotKeys\n    .map(slot => ({ slot, length: arts.values[slot].length }))\n    .filter(x => x.length > 1)\n  const { slot, length } = candidates.reduce((a, b) => a.length < b.length ? a : b)\n\n  const numChunks = Math.ceil(count / limit)\n  const boundedNumChunks = Math.min(numChunks, length)\n  const chunk = Array(boundedNumChunks).fill(0).map(_ => new Set<string>())\n  arts.values[slot].forEach(({ id }, i) => chunk[i % boundedNumChunks].add(id))\n  return chunk.map(ids => ({ ...filter, [slot]: { kind: \"id\", ids } }))\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [221], function() { return __webpack_require__(71184); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"45b11d4b\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/genshin-optimizer/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t184: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkgenshin_optimizer\"] = self[\"webpackChunkgenshin_optimizer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(221).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["objPathValue","obj","keys","Array","isArray","console","error","reduce","a","k","objectKeyMap","map","Object","fromEntries","i","objectMap","fn","entries","v","rangeGen","from","to","range","assertUnreachable","value","Error","constant","NaN","key","percent","info","operation","operands","Number","MAX_VALUE","Infinity","min","values","intoOps","max","customRead","path","type","forEachNodes","formulas","topDown","bottomUp","visiting","Set","visited","forEach","traverse","formula","has","add","delete","mapFormulas","topDownMap","bottomUpMap","topDownMapped","Map","bottomUpMapped","check","get","arrayEqual","set","result","b","undefined","length","every","allCommutativeMonoidOperations","x","Math","mul","allOperations","res","sum_frac","threshold","pass","fail","commutativeMonoidOperationSet","flatten","f","_formula","flattened","flatMap","dep","deduplicate","elementCounts","array","wrap","common","counts","next","factored","count","fill","candidatesByOperation","remainingCounts","filter","push","currentCounts","commonCounts","nextCounts","total","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","constantFold","topLevelData","shouldFold","origin","data","processed","nextContextMap","fold","context","old","numericOperands","formulaOperands","folded","numericValue","isFinite","index","selected","table","first","find","op","smallest","v1","v2","match","unmatch","list","accu","reset","nextContext","allSlotKeys","nonTravelerCharacterKeys","travelerKeys","filterFeasiblePerm","artSetPerm","reaffine","nodes","arts","forceRename","affineNodes","topLevelAffine","visit","node","isAffine","_op","dynKeys","_","nonConst","base","size","current","nextDynKey","affine","affineMap","reaffineArt","stat","dyn","slot","id","offsets","baseValue","pruneOrder","numTop","exclusion","progress","noRainbow","rainbow","noSwitchIn","noSwitchOut","includes","newList","art","other","greaterEqual","greater","some","pruneArtRange","minimum","baseRange","artRanges","computeArtRange","otherArtRanges","addArtRange","read","newRange","computeNodeRange","pruneNodeRange","nodeRange","operandRanges","newOperands","op1","op2","j","ranges","reads","_f","computeMinMax","c","sum","minMaxes","filterArts","filters","kind","ids","sets","countBuilds","_count","_artSets","artSets","available","s","exclusionToAllowed","populateShapes","indexOfShape","shape","check_free","remaining","rainbows","isolated","missing","rejected","required","allowedSet","allowedCounts","groupped","used","requiredRainbows","l","usableRainbows","sort","replacing","allowedRainbows","shapes","slice","noFilter","splitWorker","computeWorker","ComputeWorker","callback","optimizationTarget","plotBase","maxBuilds","builds","buildValues","plotData","interimReport","refresh","command","tested","failed","skipped","this","optimize","newThreshold","self","preArts","totalCount","forced","should","deps","newArts","newNodes","pruneAll","compute","initial","binding","slotCount","body","names","name","operandNames","arr","toString","join","Function","precompute","buffer","permute","m","build","artifactIds","plot","force","plots","scale","round","mergePlot","SplitWorker","minCount","pop","splitBySetOrID","addFilter","_arts","limit","numChunks","ceil","boundedNumChunks","chunk","splitByID","onmessage","splitID","computeID","interim","postMessage","source","split","setPerm","perm","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","__webpack_exports__","O","deferred","chunkIds","priority","notFulfilled","fulfilled","splice","r","d","definition","o","defineProperty","enumerable","e","chunkId","Promise","all","promises","u","miniCssF","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","then"],"sourceRoot":""}